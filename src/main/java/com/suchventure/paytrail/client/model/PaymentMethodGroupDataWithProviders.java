/*
 * Payment API
 * Paytrail Payment API 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.suchventure.paytrail.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.suchventure.paytrail.client.model.PaymentMethodProvider;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.suchventure.paytrail.client.JSON;

/**
 * PaymentMethodGroupDataWithProviders
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-19T20:23:13.800614+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class PaymentMethodGroupDataWithProviders {
  /**
   * ID of the group
   */
  @JsonAdapter(IdEnum.Adapter.class)
  public enum IdEnum {
    MOBILE("mobile"),
    
    BANK("bank"),
    
    CREDITCARD("creditcard"),
    
    CREDIT("credit");

    private String value;

    IdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IdEnum fromValue(String value) {
      for (IdEnum b : IdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IdEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IdEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private IdEnum id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_SVG = "svg";
  @SerializedName(SERIALIZED_NAME_SVG)
  private String svg;

  public static final String SERIALIZED_NAME_PROVIDERS = "providers";
  @SerializedName(SERIALIZED_NAME_PROVIDERS)
  private List<PaymentMethodProvider> providers = new ArrayList<>();

  public PaymentMethodGroupDataWithProviders() {
  }

  public PaymentMethodGroupDataWithProviders id(IdEnum id) {
    this.id = id;
    return this;
  }

   /**
   * ID of the group
   * @return id
  **/
  @javax.annotation.Nonnull
  public IdEnum getId() {
    return id;
  }

  public void setId(IdEnum id) {
    this.id = id;
  }


  public PaymentMethodGroupDataWithProviders name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Localized name of the group
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PaymentMethodGroupDataWithProviders icon(String icon) {
    this.icon = icon;
    return this;
  }

   /**
   * URL to the group PNG icon
   * @return icon
  **/
  @javax.annotation.Nonnull
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }


  public PaymentMethodGroupDataWithProviders svg(String svg) {
    this.svg = svg;
    return this;
  }

   /**
   * URL to the group SVG icon (recommended to be used instead if PNG)
   * @return svg
  **/
  @javax.annotation.Nonnull
  public String getSvg() {
    return svg;
  }

  public void setSvg(String svg) {
    this.svg = svg;
  }


  public PaymentMethodGroupDataWithProviders providers(List<PaymentMethodProvider> providers) {
    this.providers = providers;
    return this;
  }

  public PaymentMethodGroupDataWithProviders addProvidersItem(PaymentMethodProvider providersItem) {
    if (this.providers == null) {
      this.providers = new ArrayList<>();
    }
    this.providers.add(providersItem);
    return this;
  }

   /**
   * Get providers
   * @return providers
  **/
  @javax.annotation.Nonnull
  public List<PaymentMethodProvider> getProviders() {
    return providers;
  }

  public void setProviders(List<PaymentMethodProvider> providers) {
    this.providers = providers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentMethodGroupDataWithProviders paymentMethodGroupDataWithProviders = (PaymentMethodGroupDataWithProviders) o;
    return Objects.equals(this.id, paymentMethodGroupDataWithProviders.id) &&
        Objects.equals(this.name, paymentMethodGroupDataWithProviders.name) &&
        Objects.equals(this.icon, paymentMethodGroupDataWithProviders.icon) &&
        Objects.equals(this.svg, paymentMethodGroupDataWithProviders.svg) &&
        Objects.equals(this.providers, paymentMethodGroupDataWithProviders.providers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, icon, svg, providers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentMethodGroupDataWithProviders {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    svg: ").append(toIndentedString(svg)).append("\n");
    sb.append("    providers: ").append(toIndentedString(providers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("icon");
    openapiFields.add("svg");
    openapiFields.add("providers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("icon");
    openapiRequiredFields.add("svg");
    openapiRequiredFields.add("providers");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PaymentMethodGroupDataWithProviders
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentMethodGroupDataWithProviders.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentMethodGroupDataWithProviders is not found in the empty JSON string", PaymentMethodGroupDataWithProviders.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentMethodGroupDataWithProviders.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentMethodGroupDataWithProviders` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentMethodGroupDataWithProviders.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `id`
      IdEnum.validateJsonElement(jsonObj.get("id"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if (!jsonObj.get("svg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `svg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("svg").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("providers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `providers` to be an array in the JSON string but got `%s`", jsonObj.get("providers").toString()));
      }

      JsonArray jsonArrayproviders = jsonObj.getAsJsonArray("providers");
      // validate the required field `providers` (array)
      for (int i = 0; i < jsonArrayproviders.size(); i++) {
        PaymentMethodProvider.validateJsonElement(jsonArrayproviders.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentMethodGroupDataWithProviders.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentMethodGroupDataWithProviders' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentMethodGroupDataWithProviders> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentMethodGroupDataWithProviders.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentMethodGroupDataWithProviders>() {
           @Override
           public void write(JsonWriter out, PaymentMethodGroupDataWithProviders value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentMethodGroupDataWithProviders read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentMethodGroupDataWithProviders given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentMethodGroupDataWithProviders
  * @throws IOException if the JSON string is invalid with respect to PaymentMethodGroupDataWithProviders
  */
  public static PaymentMethodGroupDataWithProviders fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentMethodGroupDataWithProviders.class);
  }

 /**
  * Convert an instance of PaymentMethodGroupDataWithProviders to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

