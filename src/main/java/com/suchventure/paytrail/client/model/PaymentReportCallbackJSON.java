/*
 * Payment API
 * Paytrail Payment API 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.suchventure.paytrail.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.suchventure.paytrail.client.JSON;

/**
 * The returned fields can be filtered out by specifying \&quot;reportFields\&quot; parameter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-19T20:23:13.800614+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class PaymentReportCallbackJSON {
  public static final String SERIALIZED_NAME_ENTRY_DATE = "entryDate";
  @SerializedName(SERIALIZED_NAME_ENTRY_DATE)
  private String entryDate;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Float amount = null;

  /**
   * Payment status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NEW("New"),
    
    PAID("Paid"),
    
    WAITING_FOR_APPROVAL("waiting for approval"),
    
    CANCELLED("Cancelled"),
    
    TIMEOUT("Timeout"),
    
    HALTED("Halted"),
    
    DELAYED("Delayed"),
    
    PAID_AND_SETTLED("Paid and settled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_FIRSTNAME = "firstname";
  @SerializedName(SERIALIZED_NAME_FIRSTNAME)
  private String firstname;

  public static final String SERIALIZED_NAME_FAMILYNAME = "familyname";
  @SerializedName(SERIALIZED_NAME_FAMILYNAME)
  private String familyname;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "paymentMethod";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private String paymentMethod;

  public static final String SERIALIZED_NAME_STAMP = "stamp";
  @SerializedName(SERIALIZED_NAME_STAMP)
  private String stamp;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_POSTCODE = "postcode";
  @SerializedName(SERIALIZED_NAME_POSTCODE)
  private String postcode;

  public static final String SERIALIZED_NAME_POSTOFFICE = "postoffice";
  @SerializedName(SERIALIZED_NAME_POSTOFFICE)
  private String postoffice;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_CHECKOUT_REFERENCE = "checkoutReference";
  @SerializedName(SERIALIZED_NAME_CHECKOUT_REFERENCE)
  private String checkoutReference;

  public static final String SERIALIZED_NAME_ARCHIVE_NUMBER = "archiveNumber";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_NUMBER)
  private String archiveNumber;

  public static final String SERIALIZED_NAME_PAYER_NAME = "payerName";
  @SerializedName(SERIALIZED_NAME_PAYER_NAME)
  private String payerName;

  public static final String SERIALIZED_NAME_SETTLEMENT_ID = "settlementId";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_ID)
  private BigDecimal settlementId;

  public static final String SERIALIZED_NAME_SETTLEMENT_DATE = "settlementDate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_DATE)
  private String settlementDate;

  public static final String SERIALIZED_NAME_ORIGINAL_TRADE_REFERENCE = "originalTradeReference";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_TRADE_REFERENCE)
  private String originalTradeReference;

  public static final String SERIALIZED_NAME_VAT_PERCENTAGE = "vatPercentage";
  @SerializedName(SERIALIZED_NAME_VAT_PERCENTAGE)
  private Float vatPercentage;

  public static final String SERIALIZED_NAME_VAT_AMOUNT = "vatAmount";
  @SerializedName(SERIALIZED_NAME_VAT_AMOUNT)
  private Float vatAmount;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_FEE = "paymentMethodFee";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_FEE)
  private Float paymentMethodFee;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_COMMISSION = "paymentMethodCommission";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_COMMISSION)
  private Float paymentMethodCommission;

  public static final String SERIALIZED_NAME_SHOP_IN_SHOP_COMMISSION = "shopInShopCommission";
  @SerializedName(SERIALIZED_NAME_SHOP_IN_SHOP_COMMISSION)
  private Float shopInShopCommission;

  public static final String SERIALIZED_NAME_SHOP_IN_SHOP_COMMISSION_VAT_PERCENTAGE = "shopInShopCommissionVatPercentage";
  @SerializedName(SERIALIZED_NAME_SHOP_IN_SHOP_COMMISSION_VAT_PERCENTAGE)
  private Float shopInShopCommissionVatPercentage;

  public static final String SERIALIZED_NAME_SHOP_IN_SHOP_COMMISSION_VAT_AMOUNT = "shopInShopCommissionVatAmount";
  @SerializedName(SERIALIZED_NAME_SHOP_IN_SHOP_COMMISSION_VAT_AMOUNT)
  private Float shopInShopCommissionVatAmount;

  public static final String SERIALIZED_NAME_REFUNDITEMS = "refunditems";
  @SerializedName(SERIALIZED_NAME_REFUNDITEMS)
  private String refunditems;

  public PaymentReportCallbackJSON() {
  }

  public PaymentReportCallbackJSON entryDate(String entryDate) {
    this.entryDate = entryDate;
    return this;
  }

   /**
   * When the payment was paid or initialized
   * @return entryDate
  **/
  @javax.annotation.Nullable
  public String getEntryDate() {
    return entryDate;
  }

  public void setEntryDate(String entryDate) {
    this.entryDate = entryDate;
  }


  public PaymentReportCallbackJSON created(String created) {
    this.created = created;
    return this;
  }

   /**
   * Hour and minute of the payment creation
   * @return created
  **/
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public PaymentReportCallbackJSON amount(Float amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Payment amount in Euros
   * @return amount
  **/
  @javax.annotation.Nullable
  public Float getAmount() {
    return amount;
  }

  public void setAmount(Float amount) {
    this.amount = amount;
  }


  public PaymentReportCallbackJSON status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Payment status
   * @return status
  **/
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public PaymentReportCallbackJSON firstname(String firstname) {
    this.firstname = firstname;
    return this;
  }

   /**
   * First name
   * @return firstname
  **/
  @javax.annotation.Nullable
  public String getFirstname() {
    return firstname;
  }

  public void setFirstname(String firstname) {
    this.firstname = firstname;
  }


  public PaymentReportCallbackJSON familyname(String familyname) {
    this.familyname = familyname;
    return this;
  }

   /**
   * Last name
   * @return familyname
  **/
  @javax.annotation.Nullable
  public String getFamilyname() {
    return familyname;
  }

  public void setFamilyname(String familyname) {
    this.familyname = familyname;
  }


  public PaymentReportCallbackJSON description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Payment description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PaymentReportCallbackJSON reference(String reference) {
    this.reference = reference;
    return this;
  }

   /**
   * Merchant&#39;s reference
   * @return reference
  **/
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public PaymentReportCallbackJSON paymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Payment method
   * @return paymentMethod
  **/
  @javax.annotation.Nullable
  public String getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public PaymentReportCallbackJSON stamp(String stamp) {
    this.stamp = stamp;
    return this;
  }

   /**
   * Payment Stamp
   * @return stamp
  **/
  @javax.annotation.Nullable
  public String getStamp() {
    return stamp;
  }

  public void setStamp(String stamp) {
    this.stamp = stamp;
  }


  public PaymentReportCallbackJSON address(String address) {
    this.address = address;
    return this;
  }

   /**
   * Delivery address
   * @return address
  **/
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public PaymentReportCallbackJSON postcode(String postcode) {
    this.postcode = postcode;
    return this;
  }

   /**
   * Postal code
   * @return postcode
  **/
  @javax.annotation.Nullable
  public String getPostcode() {
    return postcode;
  }

  public void setPostcode(String postcode) {
    this.postcode = postcode;
  }


  public PaymentReportCallbackJSON postoffice(String postoffice) {
    this.postoffice = postoffice;
    return this;
  }

   /**
   * Post office
   * @return postoffice
  **/
  @javax.annotation.Nullable
  public String getPostoffice() {
    return postoffice;
  }

  public void setPostoffice(String postoffice) {
    this.postoffice = postoffice;
  }


  public PaymentReportCallbackJSON country(String country) {
    this.country = country;
    return this;
  }

   /**
   * Country of delivery
   * @return country
  **/
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public PaymentReportCallbackJSON checkoutReference(String checkoutReference) {
    this.checkoutReference = checkoutReference;
    return this;
  }

   /**
   * Checkout reference
   * @return checkoutReference
  **/
  @javax.annotation.Nullable
  public String getCheckoutReference() {
    return checkoutReference;
  }

  public void setCheckoutReference(String checkoutReference) {
    this.checkoutReference = checkoutReference;
  }


  public PaymentReportCallbackJSON archiveNumber(String archiveNumber) {
    this.archiveNumber = archiveNumber;
    return this;
  }

   /**
   * Archive number
   * @return archiveNumber
  **/
  @javax.annotation.Nullable
  public String getArchiveNumber() {
    return archiveNumber;
  }

  public void setArchiveNumber(String archiveNumber) {
    this.archiveNumber = archiveNumber;
  }


  public PaymentReportCallbackJSON payerName(String payerName) {
    this.payerName = payerName;
    return this;
  }

   /**
   * Name from bank
   * @return payerName
  **/
  @javax.annotation.Nullable
  public String getPayerName() {
    return payerName;
  }

  public void setPayerName(String payerName) {
    this.payerName = payerName;
  }


  public PaymentReportCallbackJSON settlementId(BigDecimal settlementId) {
    this.settlementId = settlementId;
    return this;
  }

   /**
   * Settlement (report) id
   * @return settlementId
  **/
  @javax.annotation.Nullable
  public BigDecimal getSettlementId() {
    return settlementId;
  }

  public void setSettlementId(BigDecimal settlementId) {
    this.settlementId = settlementId;
  }


  public PaymentReportCallbackJSON settlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
    return this;
  }

   /**
   * When the payment is settled
   * @return settlementDate
  **/
  @javax.annotation.Nullable
  public String getSettlementDate() {
    return settlementDate;
  }

  public void setSettlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
  }


  public PaymentReportCallbackJSON originalTradeReference(String originalTradeReference) {
    this.originalTradeReference = originalTradeReference;
    return this;
  }

   /**
   * Merchant&#39;s reference of the original payment in case of refund
   * @return originalTradeReference
  **/
  @javax.annotation.Nullable
  public String getOriginalTradeReference() {
    return originalTradeReference;
  }

  public void setOriginalTradeReference(String originalTradeReference) {
    this.originalTradeReference = originalTradeReference;
  }


  public PaymentReportCallbackJSON vatPercentage(Float vatPercentage) {
    this.vatPercentage = vatPercentage;
    return this;
  }

   /**
   * Payment VAT percentage
   * @return vatPercentage
  **/
  @javax.annotation.Nullable
  public Float getVatPercentage() {
    return vatPercentage;
  }

  public void setVatPercentage(Float vatPercentage) {
    this.vatPercentage = vatPercentage;
  }


  public PaymentReportCallbackJSON vatAmount(Float vatAmount) {
    this.vatAmount = vatAmount;
    return this;
  }

   /**
   * Payment VAT amount in Euros
   * @return vatAmount
  **/
  @javax.annotation.Nullable
  public Float getVatAmount() {
    return vatAmount;
  }

  public void setVatAmount(Float vatAmount) {
    this.vatAmount = vatAmount;
  }


  public PaymentReportCallbackJSON paymentMethodFee(Float paymentMethodFee) {
    this.paymentMethodFee = paymentMethodFee;
    return this;
  }

   /**
   * Payment method fee in Euros
   * @return paymentMethodFee
  **/
  @javax.annotation.Nullable
  public Float getPaymentMethodFee() {
    return paymentMethodFee;
  }

  public void setPaymentMethodFee(Float paymentMethodFee) {
    this.paymentMethodFee = paymentMethodFee;
  }


  public PaymentReportCallbackJSON paymentMethodCommission(Float paymentMethodCommission) {
    this.paymentMethodCommission = paymentMethodCommission;
    return this;
  }

   /**
   * Payment method commission amount in Euros
   * @return paymentMethodCommission
  **/
  @javax.annotation.Nullable
  public Float getPaymentMethodCommission() {
    return paymentMethodCommission;
  }

  public void setPaymentMethodCommission(Float paymentMethodCommission) {
    this.paymentMethodCommission = paymentMethodCommission;
  }


  public PaymentReportCallbackJSON shopInShopCommission(Float shopInShopCommission) {
    this.shopInShopCommission = shopInShopCommission;
    return this;
  }

   /**
   * Payment method commission amount in Euros
   * @return shopInShopCommission
  **/
  @javax.annotation.Nullable
  public Float getShopInShopCommission() {
    return shopInShopCommission;
  }

  public void setShopInShopCommission(Float shopInShopCommission) {
    this.shopInShopCommission = shopInShopCommission;
  }


  public PaymentReportCallbackJSON shopInShopCommissionVatPercentage(Float shopInShopCommissionVatPercentage) {
    this.shopInShopCommissionVatPercentage = shopInShopCommissionVatPercentage;
    return this;
  }

   /**
   * Payment method commission VAT percentage
   * @return shopInShopCommissionVatPercentage
  **/
  @javax.annotation.Nullable
  public Float getShopInShopCommissionVatPercentage() {
    return shopInShopCommissionVatPercentage;
  }

  public void setShopInShopCommissionVatPercentage(Float shopInShopCommissionVatPercentage) {
    this.shopInShopCommissionVatPercentage = shopInShopCommissionVatPercentage;
  }


  public PaymentReportCallbackJSON shopInShopCommissionVatAmount(Float shopInShopCommissionVatAmount) {
    this.shopInShopCommissionVatAmount = shopInShopCommissionVatAmount;
    return this;
  }

   /**
   * Payment method commission VAT amount in Euros
   * @return shopInShopCommissionVatAmount
  **/
  @javax.annotation.Nullable
  public Float getShopInShopCommissionVatAmount() {
    return shopInShopCommissionVatAmount;
  }

  public void setShopInShopCommissionVatAmount(Float shopInShopCommissionVatAmount) {
    this.shopInShopCommissionVatAmount = shopInShopCommissionVatAmount;
  }


  public PaymentReportCallbackJSON refunditems(String refunditems) {
    this.refunditems = refunditems;
    return this;
  }

   /**
   * Contains a &#x60;|&#x60; (pipe) -delimited list of *stamp*:*amount* pairs. Pairs are delimited by a &#x60;:&#x60; (colon). Stamp refers to the payment item&#39;s stamp that was refunded.
   * @return refunditems
  **/
  @javax.annotation.Nullable
  public String getRefunditems() {
    return refunditems;
  }

  public void setRefunditems(String refunditems) {
    this.refunditems = refunditems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentReportCallbackJSON paymentReportCallbackJSON = (PaymentReportCallbackJSON) o;
    return Objects.equals(this.entryDate, paymentReportCallbackJSON.entryDate) &&
        Objects.equals(this.created, paymentReportCallbackJSON.created) &&
        Objects.equals(this.amount, paymentReportCallbackJSON.amount) &&
        Objects.equals(this.status, paymentReportCallbackJSON.status) &&
        Objects.equals(this.firstname, paymentReportCallbackJSON.firstname) &&
        Objects.equals(this.familyname, paymentReportCallbackJSON.familyname) &&
        Objects.equals(this.description, paymentReportCallbackJSON.description) &&
        Objects.equals(this.reference, paymentReportCallbackJSON.reference) &&
        Objects.equals(this.paymentMethod, paymentReportCallbackJSON.paymentMethod) &&
        Objects.equals(this.stamp, paymentReportCallbackJSON.stamp) &&
        Objects.equals(this.address, paymentReportCallbackJSON.address) &&
        Objects.equals(this.postcode, paymentReportCallbackJSON.postcode) &&
        Objects.equals(this.postoffice, paymentReportCallbackJSON.postoffice) &&
        Objects.equals(this.country, paymentReportCallbackJSON.country) &&
        Objects.equals(this.checkoutReference, paymentReportCallbackJSON.checkoutReference) &&
        Objects.equals(this.archiveNumber, paymentReportCallbackJSON.archiveNumber) &&
        Objects.equals(this.payerName, paymentReportCallbackJSON.payerName) &&
        Objects.equals(this.settlementId, paymentReportCallbackJSON.settlementId) &&
        Objects.equals(this.settlementDate, paymentReportCallbackJSON.settlementDate) &&
        Objects.equals(this.originalTradeReference, paymentReportCallbackJSON.originalTradeReference) &&
        Objects.equals(this.vatPercentage, paymentReportCallbackJSON.vatPercentage) &&
        Objects.equals(this.vatAmount, paymentReportCallbackJSON.vatAmount) &&
        Objects.equals(this.paymentMethodFee, paymentReportCallbackJSON.paymentMethodFee) &&
        Objects.equals(this.paymentMethodCommission, paymentReportCallbackJSON.paymentMethodCommission) &&
        Objects.equals(this.shopInShopCommission, paymentReportCallbackJSON.shopInShopCommission) &&
        Objects.equals(this.shopInShopCommissionVatPercentage, paymentReportCallbackJSON.shopInShopCommissionVatPercentage) &&
        Objects.equals(this.shopInShopCommissionVatAmount, paymentReportCallbackJSON.shopInShopCommissionVatAmount) &&
        Objects.equals(this.refunditems, paymentReportCallbackJSON.refunditems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entryDate, created, amount, status, firstname, familyname, description, reference, paymentMethod, stamp, address, postcode, postoffice, country, checkoutReference, archiveNumber, payerName, settlementId, settlementDate, originalTradeReference, vatPercentage, vatAmount, paymentMethodFee, paymentMethodCommission, shopInShopCommission, shopInShopCommissionVatPercentage, shopInShopCommissionVatAmount, refunditems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentReportCallbackJSON {\n");
    sb.append("    entryDate: ").append(toIndentedString(entryDate)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
    sb.append("    familyname: ").append(toIndentedString(familyname)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    stamp: ").append(toIndentedString(stamp)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    postcode: ").append(toIndentedString(postcode)).append("\n");
    sb.append("    postoffice: ").append(toIndentedString(postoffice)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    checkoutReference: ").append(toIndentedString(checkoutReference)).append("\n");
    sb.append("    archiveNumber: ").append(toIndentedString(archiveNumber)).append("\n");
    sb.append("    payerName: ").append(toIndentedString(payerName)).append("\n");
    sb.append("    settlementId: ").append(toIndentedString(settlementId)).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("    originalTradeReference: ").append(toIndentedString(originalTradeReference)).append("\n");
    sb.append("    vatPercentage: ").append(toIndentedString(vatPercentage)).append("\n");
    sb.append("    vatAmount: ").append(toIndentedString(vatAmount)).append("\n");
    sb.append("    paymentMethodFee: ").append(toIndentedString(paymentMethodFee)).append("\n");
    sb.append("    paymentMethodCommission: ").append(toIndentedString(paymentMethodCommission)).append("\n");
    sb.append("    shopInShopCommission: ").append(toIndentedString(shopInShopCommission)).append("\n");
    sb.append("    shopInShopCommissionVatPercentage: ").append(toIndentedString(shopInShopCommissionVatPercentage)).append("\n");
    sb.append("    shopInShopCommissionVatAmount: ").append(toIndentedString(shopInShopCommissionVatAmount)).append("\n");
    sb.append("    refunditems: ").append(toIndentedString(refunditems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entryDate");
    openapiFields.add("created");
    openapiFields.add("amount");
    openapiFields.add("status");
    openapiFields.add("firstname");
    openapiFields.add("familyname");
    openapiFields.add("description");
    openapiFields.add("reference");
    openapiFields.add("paymentMethod");
    openapiFields.add("stamp");
    openapiFields.add("address");
    openapiFields.add("postcode");
    openapiFields.add("postoffice");
    openapiFields.add("country");
    openapiFields.add("checkoutReference");
    openapiFields.add("archiveNumber");
    openapiFields.add("payerName");
    openapiFields.add("settlementId");
    openapiFields.add("settlementDate");
    openapiFields.add("originalTradeReference");
    openapiFields.add("vatPercentage");
    openapiFields.add("vatAmount");
    openapiFields.add("paymentMethodFee");
    openapiFields.add("paymentMethodCommission");
    openapiFields.add("shopInShopCommission");
    openapiFields.add("shopInShopCommissionVatPercentage");
    openapiFields.add("shopInShopCommissionVatAmount");
    openapiFields.add("refunditems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PaymentReportCallbackJSON
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentReportCallbackJSON.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentReportCallbackJSON is not found in the empty JSON string", PaymentReportCallbackJSON.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentReportCallbackJSON.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentReportCallbackJSON` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("entryDate") != null && !jsonObj.get("entryDate").isJsonNull()) && !jsonObj.get("entryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entryDate").toString()));
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("firstname") != null && !jsonObj.get("firstname").isJsonNull()) && !jsonObj.get("firstname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstname").toString()));
      }
      if ((jsonObj.get("familyname") != null && !jsonObj.get("familyname").isJsonNull()) && !jsonObj.get("familyname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `familyname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("familyname").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if ((jsonObj.get("paymentMethod") != null && !jsonObj.get("paymentMethod").isJsonNull()) && !jsonObj.get("paymentMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentMethod").toString()));
      }
      if ((jsonObj.get("stamp") != null && !jsonObj.get("stamp").isJsonNull()) && !jsonObj.get("stamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stamp").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("postcode") != null && !jsonObj.get("postcode").isJsonNull()) && !jsonObj.get("postcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postcode").toString()));
      }
      if ((jsonObj.get("postoffice") != null && !jsonObj.get("postoffice").isJsonNull()) && !jsonObj.get("postoffice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postoffice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postoffice").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("checkoutReference") != null && !jsonObj.get("checkoutReference").isJsonNull()) && !jsonObj.get("checkoutReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkoutReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkoutReference").toString()));
      }
      if ((jsonObj.get("archiveNumber") != null && !jsonObj.get("archiveNumber").isJsonNull()) && !jsonObj.get("archiveNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archiveNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archiveNumber").toString()));
      }
      if ((jsonObj.get("payerName") != null && !jsonObj.get("payerName").isJsonNull()) && !jsonObj.get("payerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payerName").toString()));
      }
      if ((jsonObj.get("settlementDate") != null && !jsonObj.get("settlementDate").isJsonNull()) && !jsonObj.get("settlementDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementDate").toString()));
      }
      if ((jsonObj.get("originalTradeReference") != null && !jsonObj.get("originalTradeReference").isJsonNull()) && !jsonObj.get("originalTradeReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalTradeReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalTradeReference").toString()));
      }
      if ((jsonObj.get("refunditems") != null && !jsonObj.get("refunditems").isJsonNull()) && !jsonObj.get("refunditems").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refunditems` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refunditems").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentReportCallbackJSON.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentReportCallbackJSON' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentReportCallbackJSON> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentReportCallbackJSON.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentReportCallbackJSON>() {
           @Override
           public void write(JsonWriter out, PaymentReportCallbackJSON value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentReportCallbackJSON read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentReportCallbackJSON given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentReportCallbackJSON
  * @throws IOException if the JSON string is invalid with respect to PaymentReportCallbackJSON
  */
  public static PaymentReportCallbackJSON fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentReportCallbackJSON.class);
  }

 /**
  * Convert an instance of PaymentReportCallbackJSON to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

