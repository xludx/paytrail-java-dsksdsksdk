/*
 * Payment API
 * Paytrail Payment API 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.suchventure.paytrail.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.suchventure.paytrail.client.model.Address;
import com.suchventure.paytrail.client.model.Callbacks;
import com.suchventure.paytrail.client.model.Customer;
import com.suchventure.paytrail.client.model.Item;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.suchventure.paytrail.client.JSON;

/**
 * Payment request payload
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-19T20:23:13.800614+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class PaymentRequest {
  public static final String SERIALIZED_NAME_STAMP = "stamp";
  @SerializedName(SERIALIZED_NAME_STAMP)
  private String stamp;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Long amount;

  /**
   * Gets or Sets currency
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
  public enum CurrencyEnum {
    EUR("EUR");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency;

  /**
   * Alpha-2 language code for the payment process
   */
  @JsonAdapter(LanguageEnum.Adapter.class)
  public enum LanguageEnum {
    FI("FI"),
    
    SV("SV"),
    
    EN("EN");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LanguageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private LanguageEnum language;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<Item> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private Customer customer;

  public static final String SERIALIZED_NAME_DELIVERY_ADDRESS = "deliveryAddress";
  @SerializedName(SERIALIZED_NAME_DELIVERY_ADDRESS)
  private Address deliveryAddress;

  public static final String SERIALIZED_NAME_INVOICING_ADDRESS = "invoicingAddress";
  @SerializedName(SERIALIZED_NAME_INVOICING_ADDRESS)
  private Address invoicingAddress;

  public static final String SERIALIZED_NAME_MANUAL_INVOICE_ACTIVATION = "manualInvoiceActivation";
  @SerializedName(SERIALIZED_NAME_MANUAL_INVOICE_ACTIVATION)
  private Boolean manualInvoiceActivation;

  public static final String SERIALIZED_NAME_REDIRECT_URLS = "redirectUrls";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URLS)
  private Callbacks redirectUrls;

  public static final String SERIALIZED_NAME_CALLBACK_URLS = "callbackUrls";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URLS)
  private Callbacks callbackUrls;

  public static final String SERIALIZED_NAME_CALLBACK_DELAY = "callbackDelay";
  @SerializedName(SERIALIZED_NAME_CALLBACK_DELAY)
  private Integer callbackDelay;

  /**
   * Gets or Sets groups
   */
  @JsonAdapter(GroupsEnum.Adapter.class)
  public enum GroupsEnum {
    MOBILE("mobile"),
    
    BANK("bank"),
    
    CREDITCARD("creditcard"),
    
    CREDIT("credit"),
    
    OTHER("other");

    private String value;

    GroupsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupsEnum fromValue(String value) {
      for (GroupsEnum b : GroupsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GroupsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GroupsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GroupsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<GroupsEnum> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_USE_PRICES_WITHOUT_VAT = "usePricesWithoutVat";
  @SerializedName(SERIALIZED_NAME_USE_PRICES_WITHOUT_VAT)
  private Boolean usePricesWithoutVat;

  public PaymentRequest() {
  }

  public PaymentRequest stamp(String stamp) {
    this.stamp = stamp;
    return this;
  }

   /**
   * Merchant specific unique stamp
   * @return stamp
  **/
  @javax.annotation.Nonnull
  public String getStamp() {
    return stamp;
  }

  public void setStamp(String stamp) {
    this.stamp = stamp;
  }


  public PaymentRequest reference(String reference) {
    this.reference = reference;
    return this;
  }

   /**
   * Merchant reference for the payment
   * @return reference
  **/
  @javax.annotation.Nonnull
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public PaymentRequest amount(Long amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Total amount of the payment (sum of items), VAT should be included in amount unless &#x60;usePricesWithoutVat&#x60; is set to true
   * minimum: 0
   * maximum: 99999999
   * @return amount
  **/
  @javax.annotation.Nonnull
  public Long getAmount() {
    return amount;
  }

  public void setAmount(Long amount) {
    this.amount = amount;
  }


  public PaymentRequest currency(CurrencyEnum currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nonnull
  public CurrencyEnum getCurrency() {
    return currency;
  }

  public void setCurrency(CurrencyEnum currency) {
    this.currency = currency;
  }


  public PaymentRequest language(LanguageEnum language) {
    this.language = language;
    return this;
  }

   /**
   * Alpha-2 language code for the payment process
   * @return language
  **/
  @javax.annotation.Nonnull
  public LanguageEnum getLanguage() {
    return language;
  }

  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }


  public PaymentRequest orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

   /**
   * Order ID. Used for eg. Collector payments order ID. If not given, merchant reference is used instead.
   * @return orderId
  **/
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public PaymentRequest items(List<Item> items) {
    this.items = items;
    return this;
  }

  public PaymentRequest addItemsItem(Item itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nonnull
  public List<Item> getItems() {
    return items;
  }

  public void setItems(List<Item> items) {
    this.items = items;
  }


  public PaymentRequest customer(Customer customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nonnull
  public Customer getCustomer() {
    return customer;
  }

  public void setCustomer(Customer customer) {
    this.customer = customer;
  }


  public PaymentRequest deliveryAddress(Address deliveryAddress) {
    this.deliveryAddress = deliveryAddress;
    return this;
  }

   /**
   * Get deliveryAddress
   * @return deliveryAddress
  **/
  @javax.annotation.Nullable
  public Address getDeliveryAddress() {
    return deliveryAddress;
  }

  public void setDeliveryAddress(Address deliveryAddress) {
    this.deliveryAddress = deliveryAddress;
  }


  public PaymentRequest invoicingAddress(Address invoicingAddress) {
    this.invoicingAddress = invoicingAddress;
    return this;
  }

   /**
   * Get invoicingAddress
   * @return invoicingAddress
  **/
  @javax.annotation.Nullable
  public Address getInvoicingAddress() {
    return invoicingAddress;
  }

  public void setInvoicingAddress(Address invoicingAddress) {
    this.invoicingAddress = invoicingAddress;
  }


  public PaymentRequest manualInvoiceActivation(Boolean manualInvoiceActivation) {
    this.manualInvoiceActivation = manualInvoiceActivation;
    return this;
  }

   /**
   * If paid with invoice payment method, the invoice will not be activated automatically immediately. Currently only supported with Collector.
   * @return manualInvoiceActivation
  **/
  @javax.annotation.Nullable
  public Boolean getManualInvoiceActivation() {
    return manualInvoiceActivation;
  }

  public void setManualInvoiceActivation(Boolean manualInvoiceActivation) {
    this.manualInvoiceActivation = manualInvoiceActivation;
  }


  public PaymentRequest redirectUrls(Callbacks redirectUrls) {
    this.redirectUrls = redirectUrls;
    return this;
  }

   /**
   * Get redirectUrls
   * @return redirectUrls
  **/
  @javax.annotation.Nonnull
  public Callbacks getRedirectUrls() {
    return redirectUrls;
  }

  public void setRedirectUrls(Callbacks redirectUrls) {
    this.redirectUrls = redirectUrls;
  }


  public PaymentRequest callbackUrls(Callbacks callbackUrls) {
    this.callbackUrls = callbackUrls;
    return this;
  }

   /**
   * Get callbackUrls
   * @return callbackUrls
  **/
  @javax.annotation.Nullable
  public Callbacks getCallbackUrls() {
    return callbackUrls;
  }

  public void setCallbackUrls(Callbacks callbackUrls) {
    this.callbackUrls = callbackUrls;
  }


  public PaymentRequest callbackDelay(Integer callbackDelay) {
    this.callbackDelay = callbackDelay;
    return this;
  }

   /**
   * Callback delay in seconds. If callback URLs and delay are provided, callbacks will be called after the delay.
   * minimum: 0
   * maximum: 900
   * @return callbackDelay
  **/
  @javax.annotation.Nullable
  public Integer getCallbackDelay() {
    return callbackDelay;
  }

  public void setCallbackDelay(Integer callbackDelay) {
    this.callbackDelay = callbackDelay;
  }


  public PaymentRequest groups(List<GroupsEnum> groups) {
    this.groups = groups;
    return this;
  }

  public PaymentRequest addGroupsItem(GroupsEnum groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

   /**
   * Optionally return only payment methods for selected groups
   * @return groups
  **/
  @javax.annotation.Nullable
  public List<GroupsEnum> getGroups() {
    return groups;
  }

  public void setGroups(List<GroupsEnum> groups) {
    this.groups = groups;
  }


  public PaymentRequest usePricesWithoutVat(Boolean usePricesWithoutVat) {
    this.usePricesWithoutVat = usePricesWithoutVat;
    return this;
  }

   /**
   * If true, &#x60;amount&#x60; and &#x60;items.unitPrice&#x60; should be sent to API without VAT, and final VAT-included prices are calculated by Paytrail&#39;s system (with prices rounded to closest cent). Also, when true, items must be included.
   * @return usePricesWithoutVat
  **/
  @javax.annotation.Nullable
  public Boolean getUsePricesWithoutVat() {
    return usePricesWithoutVat;
  }

  public void setUsePricesWithoutVat(Boolean usePricesWithoutVat) {
    this.usePricesWithoutVat = usePricesWithoutVat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentRequest paymentRequest = (PaymentRequest) o;
    return Objects.equals(this.stamp, paymentRequest.stamp) &&
        Objects.equals(this.reference, paymentRequest.reference) &&
        Objects.equals(this.amount, paymentRequest.amount) &&
        Objects.equals(this.currency, paymentRequest.currency) &&
        Objects.equals(this.language, paymentRequest.language) &&
        Objects.equals(this.orderId, paymentRequest.orderId) &&
        Objects.equals(this.items, paymentRequest.items) &&
        Objects.equals(this.customer, paymentRequest.customer) &&
        Objects.equals(this.deliveryAddress, paymentRequest.deliveryAddress) &&
        Objects.equals(this.invoicingAddress, paymentRequest.invoicingAddress) &&
        Objects.equals(this.manualInvoiceActivation, paymentRequest.manualInvoiceActivation) &&
        Objects.equals(this.redirectUrls, paymentRequest.redirectUrls) &&
        Objects.equals(this.callbackUrls, paymentRequest.callbackUrls) &&
        Objects.equals(this.callbackDelay, paymentRequest.callbackDelay) &&
        Objects.equals(this.groups, paymentRequest.groups) &&
        Objects.equals(this.usePricesWithoutVat, paymentRequest.usePricesWithoutVat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stamp, reference, amount, currency, language, orderId, items, customer, deliveryAddress, invoicingAddress, manualInvoiceActivation, redirectUrls, callbackUrls, callbackDelay, groups, usePricesWithoutVat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentRequest {\n");
    sb.append("    stamp: ").append(toIndentedString(stamp)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    deliveryAddress: ").append(toIndentedString(deliveryAddress)).append("\n");
    sb.append("    invoicingAddress: ").append(toIndentedString(invoicingAddress)).append("\n");
    sb.append("    manualInvoiceActivation: ").append(toIndentedString(manualInvoiceActivation)).append("\n");
    sb.append("    redirectUrls: ").append(toIndentedString(redirectUrls)).append("\n");
    sb.append("    callbackUrls: ").append(toIndentedString(callbackUrls)).append("\n");
    sb.append("    callbackDelay: ").append(toIndentedString(callbackDelay)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    usePricesWithoutVat: ").append(toIndentedString(usePricesWithoutVat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("stamp");
    openapiFields.add("reference");
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("language");
    openapiFields.add("orderId");
    openapiFields.add("items");
    openapiFields.add("customer");
    openapiFields.add("deliveryAddress");
    openapiFields.add("invoicingAddress");
    openapiFields.add("manualInvoiceActivation");
    openapiFields.add("redirectUrls");
    openapiFields.add("callbackUrls");
    openapiFields.add("callbackDelay");
    openapiFields.add("groups");
    openapiFields.add("usePricesWithoutVat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("stamp");
    openapiRequiredFields.add("reference");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("language");
    openapiRequiredFields.add("items");
    openapiRequiredFields.add("customer");
    openapiRequiredFields.add("redirectUrls");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PaymentRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentRequest is not found in the empty JSON string", PaymentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("stamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stamp").toString()));
      }
      if (!jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the required field `currency`
      CurrencyEnum.validateJsonElement(jsonObj.get("currency"));
      if (!jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // validate the required field `language`
      LanguageEnum.validateJsonElement(jsonObj.get("language"));
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
      }

      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      // validate the required field `items` (array)
      for (int i = 0; i < jsonArrayitems.size(); i++) {
        Item.validateJsonElement(jsonArrayitems.get(i));
      };
      // validate the required field `customer`
      Customer.validateJsonElement(jsonObj.get("customer"));
      // validate the optional field `deliveryAddress`
      if (jsonObj.get("deliveryAddress") != null && !jsonObj.get("deliveryAddress").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("deliveryAddress"));
      }
      // validate the optional field `invoicingAddress`
      if (jsonObj.get("invoicingAddress") != null && !jsonObj.get("invoicingAddress").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("invoicingAddress"));
      }
      // validate the required field `redirectUrls`
      Callbacks.validateJsonElement(jsonObj.get("redirectUrls"));
      // validate the optional field `callbackUrls`
      if (jsonObj.get("callbackUrls") != null && !jsonObj.get("callbackUrls").isJsonNull()) {
        Callbacks.validateJsonElement(jsonObj.get("callbackUrls"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull() && !jsonObj.get("groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentRequest>() {
           @Override
           public void write(JsonWriter out, PaymentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentRequest
  * @throws IOException if the JSON string is invalid with respect to PaymentRequest
  */
  public static PaymentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentRequest.class);
  }

 /**
  * Convert an instance of PaymentRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

