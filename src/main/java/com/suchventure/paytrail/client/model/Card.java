/*
 * Payment API
 * Paytrail Payment API 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.suchventure.paytrail.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.suchventure.paytrail.client.JSON;

/**
 * Card
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-19T20:23:13.800614+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class Card {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_PARTIAL_PAN = "partial_pan";
  @SerializedName(SERIALIZED_NAME_PARTIAL_PAN)
  private String partialPan;

  public static final String SERIALIZED_NAME_EXPIRE_YEAR = "expire_year";
  @SerializedName(SERIALIZED_NAME_EXPIRE_YEAR)
  private String expireYear;

  public static final String SERIALIZED_NAME_EXPIRE_MONTH = "expire_month";
  @SerializedName(SERIALIZED_NAME_EXPIRE_MONTH)
  private String expireMonth;

  public static final String SERIALIZED_NAME_CVC_REQUIRED = "cvc_required";
  @SerializedName(SERIALIZED_NAME_CVC_REQUIRED)
  private String cvcRequired;

  public static final String SERIALIZED_NAME_BIN = "bin";
  @SerializedName(SERIALIZED_NAME_BIN)
  private String bin;

  public static final String SERIALIZED_NAME_FUNDING = "funding";
  @SerializedName(SERIALIZED_NAME_FUNDING)
  private String funding;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_CARD_FINGERPRINT = "card_fingerprint";
  @SerializedName(SERIALIZED_NAME_CARD_FINGERPRINT)
  private String cardFingerprint;

  public static final String SERIALIZED_NAME_PAN_FINGERPRINT = "pan_fingerprint";
  @SerializedName(SERIALIZED_NAME_PAN_FINGERPRINT)
  private String panFingerprint;

  public Card() {
  }

  public Card type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Card type, for example ‘Visa’
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Card partialPan(String partialPan) {
    this.partialPan = partialPan;
    return this;
  }

   /**
   * Last four digits of the card
   * @return partialPan
  **/
  @javax.annotation.Nullable
  public String getPartialPan() {
    return partialPan;
  }

  public void setPartialPan(String partialPan) {
    this.partialPan = partialPan;
  }


  public Card expireYear(String expireYear) {
    this.expireYear = expireYear;
    return this;
  }

   /**
   * Card expiration year
   * @return expireYear
  **/
  @javax.annotation.Nullable
  public String getExpireYear() {
    return expireYear;
  }

  public void setExpireYear(String expireYear) {
    this.expireYear = expireYear;
  }


  public Card expireMonth(String expireMonth) {
    this.expireMonth = expireMonth;
    return this;
  }

   /**
   * Card expiration month
   * @return expireMonth
  **/
  @javax.annotation.Nullable
  public String getExpireMonth() {
    return expireMonth;
  }

  public void setExpireMonth(String expireMonth) {
    this.expireMonth = expireMonth;
  }


  public Card cvcRequired(String cvcRequired) {
    this.cvcRequired = cvcRequired;
    return this;
  }

   /**
   * Whether the CVC is required for paying with this card. Can be one of yes, no or not_tested.
   * @return cvcRequired
  **/
  @javax.annotation.Nullable
  public String getCvcRequired() {
    return cvcRequired;
  }

  public void setCvcRequired(String cvcRequired) {
    this.cvcRequired = cvcRequired;
  }


  public Card bin(String bin) {
    this.bin = bin;
    return this;
  }

   /**
   * First 2 or 6 digits of the card number. (6 MC/VISA, 2 Amex/Diners)
   * @return bin
  **/
  @javax.annotation.Nullable
  public String getBin() {
    return bin;
  }

  public void setBin(String bin) {
    this.bin = bin;
  }


  public Card funding(String funding) {
    this.funding = funding;
    return this;
  }

   /**
   * credit, debit or unknown
   * @return funding
  **/
  @javax.annotation.Nullable
  public String getFunding() {
    return funding;
  }

  public void setFunding(String funding) {
    this.funding = funding;
  }


  public Card countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

   /**
   * e.g. FI
   * @return countryCode
  **/
  @javax.annotation.Nonnull
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public Card category(String category) {
    this.category = category;
    return this;
  }

   /**
   * business, prepaid or unknown
   * @return category
  **/
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public Card cardFingerprint(String cardFingerprint) {
    this.cardFingerprint = cardFingerprint;
    return this;
  }

   /**
   * Identifies a specific card number. Cards with the same PAN but different expiry dates will have the same PAN fingerprint. Hex string of length 64.
   * @return cardFingerprint
  **/
  @javax.annotation.Nullable
  public String getCardFingerprint() {
    return cardFingerprint;
  }

  public void setCardFingerprint(String cardFingerprint) {
    this.cardFingerprint = cardFingerprint;
  }


  public Card panFingerprint(String panFingerprint) {
    this.panFingerprint = panFingerprint;
    return this;
  }

   /**
   * Identifies a specific card, including the expiry date. Hex string of length 64.
   * @return panFingerprint
  **/
  @javax.annotation.Nullable
  public String getPanFingerprint() {
    return panFingerprint;
  }

  public void setPanFingerprint(String panFingerprint) {
    this.panFingerprint = panFingerprint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Card card = (Card) o;
    return Objects.equals(this.type, card.type) &&
        Objects.equals(this.partialPan, card.partialPan) &&
        Objects.equals(this.expireYear, card.expireYear) &&
        Objects.equals(this.expireMonth, card.expireMonth) &&
        Objects.equals(this.cvcRequired, card.cvcRequired) &&
        Objects.equals(this.bin, card.bin) &&
        Objects.equals(this.funding, card.funding) &&
        Objects.equals(this.countryCode, card.countryCode) &&
        Objects.equals(this.category, card.category) &&
        Objects.equals(this.cardFingerprint, card.cardFingerprint) &&
        Objects.equals(this.panFingerprint, card.panFingerprint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, partialPan, expireYear, expireMonth, cvcRequired, bin, funding, countryCode, category, cardFingerprint, panFingerprint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Card {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    partialPan: ").append(toIndentedString(partialPan)).append("\n");
    sb.append("    expireYear: ").append(toIndentedString(expireYear)).append("\n");
    sb.append("    expireMonth: ").append(toIndentedString(expireMonth)).append("\n");
    sb.append("    cvcRequired: ").append(toIndentedString(cvcRequired)).append("\n");
    sb.append("    bin: ").append(toIndentedString(bin)).append("\n");
    sb.append("    funding: ").append(toIndentedString(funding)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    cardFingerprint: ").append(toIndentedString(cardFingerprint)).append("\n");
    sb.append("    panFingerprint: ").append(toIndentedString(panFingerprint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("partial_pan");
    openapiFields.add("expire_year");
    openapiFields.add("expire_month");
    openapiFields.add("cvc_required");
    openapiFields.add("bin");
    openapiFields.add("funding");
    openapiFields.add("country_code");
    openapiFields.add("category");
    openapiFields.add("card_fingerprint");
    openapiFields.add("pan_fingerprint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("country_code");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Card
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Card.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Card is not found in the empty JSON string", Card.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Card.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Card` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Card.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("partial_pan") != null && !jsonObj.get("partial_pan").isJsonNull()) && !jsonObj.get("partial_pan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partial_pan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partial_pan").toString()));
      }
      if ((jsonObj.get("expire_year") != null && !jsonObj.get("expire_year").isJsonNull()) && !jsonObj.get("expire_year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expire_year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expire_year").toString()));
      }
      if ((jsonObj.get("expire_month") != null && !jsonObj.get("expire_month").isJsonNull()) && !jsonObj.get("expire_month").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expire_month` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expire_month").toString()));
      }
      if ((jsonObj.get("cvc_required") != null && !jsonObj.get("cvc_required").isJsonNull()) && !jsonObj.get("cvc_required").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cvc_required` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cvc_required").toString()));
      }
      if ((jsonObj.get("bin") != null && !jsonObj.get("bin").isJsonNull()) && !jsonObj.get("bin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bin").toString()));
      }
      if ((jsonObj.get("funding") != null && !jsonObj.get("funding").isJsonNull()) && !jsonObj.get("funding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `funding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("funding").toString()));
      }
      if (!jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("card_fingerprint") != null && !jsonObj.get("card_fingerprint").isJsonNull()) && !jsonObj.get("card_fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_fingerprint").toString()));
      }
      if ((jsonObj.get("pan_fingerprint") != null && !jsonObj.get("pan_fingerprint").isJsonNull()) && !jsonObj.get("pan_fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pan_fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pan_fingerprint").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Card.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Card' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Card> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Card.class));

       return (TypeAdapter<T>) new TypeAdapter<Card>() {
           @Override
           public void write(JsonWriter out, Card value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Card read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Card given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Card
  * @throws IOException if the JSON string is invalid with respect to Card
  */
  public static Card fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Card.class);
  }

 /**
  * Convert an instance of Card to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

