/*
 * Payment API
 * Paytrail Payment API 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.suchventure.paytrail.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.suchventure.paytrail.client.JSON;

/**
 * Payment report request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-19T20:23:13.800614+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class PaymentReportRequest {
  /**
   * In which format is the report delivered in
   */
  @JsonAdapter(RequestTypeEnum.Adapter.class)
  public enum RequestTypeEnum {
    JSON("json"),
    
    CSV("csv");

    private String value;

    RequestTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequestTypeEnum fromValue(String value) {
      for (RequestTypeEnum b : RequestTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequestTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequestTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequestTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequestTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RequestTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REQUEST_TYPE = "requestType";
  @SerializedName(SERIALIZED_NAME_REQUEST_TYPE)
  private RequestTypeEnum requestType;

  public static final String SERIALIZED_NAME_CALLBACK_URL = "callbackUrl";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URL)
  private String callbackUrl;

  /**
   * How are the payments statuses filtered. \&quot;Default\&quot; includes both paid and settled payments. \&quot;Paid\&quot; includes paid payments that have not been settled yet. \&quot;All\&quot; includes everything, for example unpaid or failed payments.
   */
  @JsonAdapter(PaymentStatusEnum.Adapter.class)
  public enum PaymentStatusEnum {
    DEFAULT("default"),
    
    ALL("all"),
    
    PAID("paid"),
    
    SETTLED("settled");

    private String value;

    PaymentStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentStatusEnum fromValue(String value) {
      for (PaymentStatusEnum b : PaymentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_STATUS = "paymentStatus";
  @SerializedName(SERIALIZED_NAME_PAYMENT_STATUS)
  private PaymentStatusEnum paymentStatus = PaymentStatusEnum.DEFAULT;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit = 50000;

  /**
   * Gets or Sets reportFields
   */
  @JsonAdapter(ReportFieldsEnum.Adapter.class)
  public enum ReportFieldsEnum {
    ENTRYDATE("entryDate"),
    
    CREATED("created"),
    
    AMOUNT("amount"),
    
    STATUS("status"),
    
    FIRSTNAME("firstname"),
    
    FAMILYNAME("familyname"),
    
    DESCRIPTION("description"),
    
    REFERENCE("reference"),
    
    PAYMENTMETHOD("paymentMethod"),
    
    STAMP("stamp"),
    
    ADDRESS("address"),
    
    POSTCODE("postcode"),
    
    POSTOFFICE("postoffice"),
    
    COUNTRY("country"),
    
    CHECKOUTREFERENCE("checkoutReference"),
    
    ARCHIVENUMBER("archiveNumber"),
    
    PAYERNAME("payerName"),
    
    SETTLEMENTID("settlementId"),
    
    SETTLEMENTDATE("settlementDate"),
    
    ORIGINALTRADEREFERENCE("originalTradeReference"),
    
    VATPERCENTAGE("vatPercentage"),
    
    VATAMOUNT("vatAmount"),
    
    PAYMENTMETHODFEE("paymentMethodFee"),
    
    PAYMENTMETHODCOMMISSION("paymentMethodCommission"),
    
    SHOPINSHOPCOMMISSION("shopInShopCommission"),
    
    SHOPINSHOPCOMMISSIONVATPERCENTAGE("shopInShopCommissionVatPercentage"),
    
    SHOPINSHOPCOMMISSIONVATAMOUNT("shopInShopCommissionVatAmount"),
    
    REFUNDITEMS("refunditems"),
    
    TRADEITEMS("tradeitems");

    private String value;

    ReportFieldsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReportFieldsEnum fromValue(String value) {
      for (ReportFieldsEnum b : ReportFieldsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReportFieldsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReportFieldsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReportFieldsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReportFieldsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReportFieldsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPORT_FIELDS = "reportFields";
  @SerializedName(SERIALIZED_NAME_REPORT_FIELDS)
  private List<ReportFieldsEnum> reportFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBMERCHANT = "submerchant";
  @SerializedName(SERIALIZED_NAME_SUBMERCHANT)
  private Integer submerchant;

  public static final String SERIALIZED_NAME_INCLUDE_ITEMS = "includeItems";
  @SerializedName(SERIALIZED_NAME_INCLUDE_ITEMS)
  private Boolean includeItems;

  public PaymentReportRequest() {
  }

  public PaymentReportRequest requestType(RequestTypeEnum requestType) {
    this.requestType = requestType;
    return this;
  }

   /**
   * In which format is the report delivered in
   * @return requestType
  **/
  @javax.annotation.Nonnull
  public RequestTypeEnum getRequestType() {
    return requestType;
  }

  public void setRequestType(RequestTypeEnum requestType) {
    this.requestType = requestType;
  }


  public PaymentReportRequest callbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
    return this;
  }

   /**
   * To which URL is the report delivered to. Callback URLs must use HTTPS
   * @return callbackUrl
  **/
  @javax.annotation.Nonnull
  public String getCallbackUrl() {
    return callbackUrl;
  }

  public void setCallbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }


  public PaymentReportRequest paymentStatus(PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
    return this;
  }

   /**
   * How are the payments statuses filtered. \&quot;Default\&quot; includes both paid and settled payments. \&quot;Paid\&quot; includes paid payments that have not been settled yet. \&quot;All\&quot; includes everything, for example unpaid or failed payments.
   * @return paymentStatus
  **/
  @javax.annotation.Nullable
  public PaymentStatusEnum getPaymentStatus() {
    return paymentStatus;
  }

  public void setPaymentStatus(PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
  }


  public PaymentReportRequest startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Filter out payments created before given datetime.
   * @return startDate
  **/
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public PaymentReportRequest endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * Filter out payments created after given datetime.
   * @return endDate
  **/
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public PaymentReportRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * Limit the amount of payments included in the report.
   * maximum: 50000
   * @return limit
  **/
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public PaymentReportRequest reportFields(List<ReportFieldsEnum> reportFields) {
    this.reportFields = reportFields;
    return this;
  }

  public PaymentReportRequest addReportFieldsItem(ReportFieldsEnum reportFieldsItem) {
    if (this.reportFields == null) {
      this.reportFields = new ArrayList<>();
    }
    this.reportFields.add(reportFieldsItem);
    return this;
  }

   /**
   * Limit the amount of fields included in the report. By default all fields are included.
   * @return reportFields
  **/
  @javax.annotation.Nullable
  public List<ReportFieldsEnum> getReportFields() {
    return reportFields;
  }

  public void setReportFields(List<ReportFieldsEnum> reportFields) {
    this.reportFields = reportFields;
  }


  public PaymentReportRequest submerchant(Integer submerchant) {
    this.submerchant = submerchant;
    return this;
  }

   /**
   * Get submerchant&#39;s payment report
   * @return submerchant
  **/
  @javax.annotation.Nullable
  public Integer getSubmerchant() {
    return submerchant;
  }

  public void setSubmerchant(Integer submerchant) {
    this.submerchant = submerchant;
  }


  public PaymentReportRequest includeItems(Boolean includeItems) {
    this.includeItems = includeItems;
    return this;
  }

   /**
   * Include trade items in created payment report
   * @return includeItems
  **/
  @javax.annotation.Nullable
  public Boolean getIncludeItems() {
    return includeItems;
  }

  public void setIncludeItems(Boolean includeItems) {
    this.includeItems = includeItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentReportRequest paymentReportRequest = (PaymentReportRequest) o;
    return Objects.equals(this.requestType, paymentReportRequest.requestType) &&
        Objects.equals(this.callbackUrl, paymentReportRequest.callbackUrl) &&
        Objects.equals(this.paymentStatus, paymentReportRequest.paymentStatus) &&
        Objects.equals(this.startDate, paymentReportRequest.startDate) &&
        Objects.equals(this.endDate, paymentReportRequest.endDate) &&
        Objects.equals(this.limit, paymentReportRequest.limit) &&
        Objects.equals(this.reportFields, paymentReportRequest.reportFields) &&
        Objects.equals(this.submerchant, paymentReportRequest.submerchant) &&
        Objects.equals(this.includeItems, paymentReportRequest.includeItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestType, callbackUrl, paymentStatus, startDate, endDate, limit, reportFields, submerchant, includeItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentReportRequest {\n");
    sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    reportFields: ").append(toIndentedString(reportFields)).append("\n");
    sb.append("    submerchant: ").append(toIndentedString(submerchant)).append("\n");
    sb.append("    includeItems: ").append(toIndentedString(includeItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("requestType");
    openapiFields.add("callbackUrl");
    openapiFields.add("paymentStatus");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("limit");
    openapiFields.add("reportFields");
    openapiFields.add("submerchant");
    openapiFields.add("includeItems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("requestType");
    openapiRequiredFields.add("callbackUrl");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PaymentReportRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentReportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentReportRequest is not found in the empty JSON string", PaymentReportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentReportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentReportRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentReportRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("requestType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestType").toString()));
      }
      // validate the required field `requestType`
      RequestTypeEnum.validateJsonElement(jsonObj.get("requestType"));
      if (!jsonObj.get("callbackUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callbackUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callbackUrl").toString()));
      }
      if ((jsonObj.get("paymentStatus") != null && !jsonObj.get("paymentStatus").isJsonNull()) && !jsonObj.get("paymentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentStatus").toString()));
      }
      // validate the optional field `paymentStatus`
      if (jsonObj.get("paymentStatus") != null && !jsonObj.get("paymentStatus").isJsonNull()) {
        PaymentStatusEnum.validateJsonElement(jsonObj.get("paymentStatus"));
      }
      if ((jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) && !jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if ((jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) && !jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reportFields") != null && !jsonObj.get("reportFields").isJsonNull() && !jsonObj.get("reportFields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportFields` to be an array in the JSON string but got `%s`", jsonObj.get("reportFields").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentReportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentReportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentReportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentReportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentReportRequest>() {
           @Override
           public void write(JsonWriter out, PaymentReportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentReportRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentReportRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentReportRequest
  * @throws IOException if the JSON string is invalid with respect to PaymentReportRequest
  */
  public static PaymentReportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentReportRequest.class);
  }

 /**
  * Convert an instance of PaymentReportRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

