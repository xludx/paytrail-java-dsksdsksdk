/*
 * Payment API
 * Paytrail Payment API 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.suchventure.paytrail.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.suchventure.paytrail.client.JSON;

/**
 * RefundItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-19T20:23:13.800614+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class RefundItem {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Long amount;

  public static final String SERIALIZED_NAME_STAMP = "stamp";
  @SerializedName(SERIALIZED_NAME_STAMP)
  private String stamp;

  public static final String SERIALIZED_NAME_REFUND_STAMP = "refundStamp";
  @SerializedName(SERIALIZED_NAME_REFUND_STAMP)
  private String refundStamp;

  public static final String SERIALIZED_NAME_REFUND_REFERENCE = "refundReference";
  @SerializedName(SERIALIZED_NAME_REFUND_REFERENCE)
  private String refundReference;

  public RefundItem() {
  }

  public RefundItem amount(Long amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Amount to refund
   * minimum: 1
   * @return amount
  **/
  @javax.annotation.Nonnull
  public Long getAmount() {
    return amount;
  }

  public void setAmount(Long amount) {
    this.amount = amount;
  }


  public RefundItem stamp(String stamp) {
    this.stamp = stamp;
    return this;
  }

   /**
   * Original item stamp
   * @return stamp
  **/
  @javax.annotation.Nonnull
  public String getStamp() {
    return stamp;
  }

  public void setStamp(String stamp) {
    this.stamp = stamp;
  }


  public RefundItem refundStamp(String refundStamp) {
    this.refundStamp = refundStamp;
    return this;
  }

   /**
   * Merchant specific unique stamp for the refund
   * @return refundStamp
  **/
  @javax.annotation.Nullable
  public String getRefundStamp() {
    return refundStamp;
  }

  public void setRefundStamp(String refundStamp) {
    this.refundStamp = refundStamp;
  }


  public RefundItem refundReference(String refundReference) {
    this.refundReference = refundReference;
    return this;
  }

   /**
   * Merchant reference for the refund
   * @return refundReference
  **/
  @javax.annotation.Nullable
  public String getRefundReference() {
    return refundReference;
  }

  public void setRefundReference(String refundReference) {
    this.refundReference = refundReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RefundItem refundItem = (RefundItem) o;
    return Objects.equals(this.amount, refundItem.amount) &&
        Objects.equals(this.stamp, refundItem.stamp) &&
        Objects.equals(this.refundStamp, refundItem.refundStamp) &&
        Objects.equals(this.refundReference, refundItem.refundReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, stamp, refundStamp, refundReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RefundItem {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    stamp: ").append(toIndentedString(stamp)).append("\n");
    sb.append("    refundStamp: ").append(toIndentedString(refundStamp)).append("\n");
    sb.append("    refundReference: ").append(toIndentedString(refundReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("stamp");
    openapiFields.add("refundStamp");
    openapiFields.add("refundReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("stamp");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RefundItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RefundItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RefundItem is not found in the empty JSON string", RefundItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RefundItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RefundItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RefundItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("stamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stamp").toString()));
      }
      if ((jsonObj.get("refundStamp") != null && !jsonObj.get("refundStamp").isJsonNull()) && !jsonObj.get("refundStamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundStamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundStamp").toString()));
      }
      if ((jsonObj.get("refundReference") != null && !jsonObj.get("refundReference").isJsonNull()) && !jsonObj.get("refundReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundReference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RefundItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RefundItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RefundItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RefundItem.class));

       return (TypeAdapter<T>) new TypeAdapter<RefundItem>() {
           @Override
           public void write(JsonWriter out, RefundItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RefundItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RefundItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RefundItem
  * @throws IOException if the JSON string is invalid with respect to RefundItem
  */
  public static RefundItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RefundItem.class);
  }

 /**
  * Convert an instance of RefundItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

