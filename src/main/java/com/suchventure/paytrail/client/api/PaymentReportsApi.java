/*
 * Payment API
 * Paytrail Payment API 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.suchventure.paytrail.client.api;

import com.suchventure.paytrail.client.ApiCallback;
import com.suchventure.paytrail.client.ApiClient;
import com.suchventure.paytrail.client.ApiException;
import com.suchventure.paytrail.client.ApiResponse;
import com.suchventure.paytrail.client.Configuration;
import com.suchventure.paytrail.client.Pair;
import com.suchventure.paytrail.client.ProgressRequestBody;
import com.suchventure.paytrail.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.suchventure.paytrail.client.model.Error;
import java.time.OffsetDateTime;
import com.suchventure.paytrail.client.model.PaymentReportBySettlementIdRequest;
import com.suchventure.paytrail.client.model.PaymentReportRequest;
import com.suchventure.paytrail.client.model.PaymentReportRequestResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentReportsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentReportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentReportsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call requestPaymentReportCall(PaymentReportRequest paymentReportRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentReportRequest;

        // create path and map variables
        String localVarPath = "/payments/report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkoutAccount != null) {
            localVarHeaderParams.put("checkout-account", localVarApiClient.parameterToString(checkoutAccount));
        }

        if (checkoutAlgorithm != null) {
            localVarHeaderParams.put("checkout-algorithm", localVarApiClient.parameterToString(checkoutAlgorithm));
        }

        if (checkoutMethod != null) {
            localVarHeaderParams.put("checkout-method", localVarApiClient.parameterToString(checkoutMethod));
        }

        if (checkoutTimestamp != null) {
            localVarHeaderParams.put("checkout-timestamp", localVarApiClient.parameterToString(checkoutTimestamp));
        }

        if (signature != null) {
            localVarHeaderParams.put("signature", localVarApiClient.parameterToString(signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestPaymentReportValidateBeforeCall(PaymentReportRequest paymentReportRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentReportRequest' is set
        if (paymentReportRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentReportRequest' when calling requestPaymentReport(Async)");
        }

        return requestPaymentReportCall(paymentReportRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, signature, _callback);

    }


    private ApiResponse<PaymentReportRequestResponse> requestPaymentReportWithHttpInfo(PaymentReportRequest paymentReportRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String signature) throws ApiException {
        okhttp3.Call localVarCall = requestPaymentReportValidateBeforeCall(paymentReportRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, signature, null);
        Type localVarReturnType = new TypeToken<PaymentReportRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call requestPaymentReportAsync(PaymentReportRequest paymentReportRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String signature, final ApiCallback<PaymentReportRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestPaymentReportValidateBeforeCall(paymentReportRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, signature, _callback);
        Type localVarReturnType = new TypeToken<PaymentReportRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIrequestPaymentReportRequest {
        private final PaymentReportRequest paymentReportRequest;
        private Integer checkoutAccount;
        private String checkoutAlgorithm;
        private String checkoutMethod;
        private OffsetDateTime checkoutTimestamp;
        private String signature;

        private APIrequestPaymentReportRequest(PaymentReportRequest paymentReportRequest) {
            this.paymentReportRequest = paymentReportRequest;
        }

        /**
         * Set checkoutAccount
         * @param checkoutAccount Merchant ID (optional)
         * @return APIrequestPaymentReportRequest
         */
        public APIrequestPaymentReportRequest checkoutAccount(Integer checkoutAccount) {
            this.checkoutAccount = checkoutAccount;
            return this;
        }

        /**
         * Set checkoutAlgorithm
         * @param checkoutAlgorithm HMAC algorithm (optional)
         * @return APIrequestPaymentReportRequest
         */
        public APIrequestPaymentReportRequest checkoutAlgorithm(String checkoutAlgorithm) {
            this.checkoutAlgorithm = checkoutAlgorithm;
            return this;
        }

        /**
         * Set checkoutMethod
         * @param checkoutMethod HTTP method of the request (optional)
         * @return APIrequestPaymentReportRequest
         */
        public APIrequestPaymentReportRequest checkoutMethod(String checkoutMethod) {
            this.checkoutMethod = checkoutMethod;
            return this;
        }

        /**
         * Set checkoutTimestamp
         * @param checkoutTimestamp Current timestamp in ISO 8601 format (optional)
         * @return APIrequestPaymentReportRequest
         */
        public APIrequestPaymentReportRequest checkoutTimestamp(OffsetDateTime checkoutTimestamp) {
            this.checkoutTimestamp = checkoutTimestamp;
            return this;
        }

        /**
         * Set signature
         * @param signature HMAC signature calculated over the request headers and payload (optional)
         * @return APIrequestPaymentReportRequest
         */
        public APIrequestPaymentReportRequest signature(String signature) {
            this.signature = signature;
            return this;
        }

        /**
         * Build call for requestPaymentReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment report request response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return requestPaymentReportCall(paymentReportRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, signature, _callback);
        }

        /**
         * Execute requestPaymentReport request
         * @return PaymentReportRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment report request response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public PaymentReportRequestResponse execute() throws ApiException {
            ApiResponse<PaymentReportRequestResponse> localVarResp = requestPaymentReportWithHttpInfo(paymentReportRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, signature);
            return localVarResp.getData();
        }

        /**
         * Execute requestPaymentReport request with HTTP info returned
         * @return ApiResponse&lt;PaymentReportRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment report request response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentReportRequestResponse> executeWithHttpInfo() throws ApiException {
            return requestPaymentReportWithHttpInfo(paymentReportRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, signature);
        }

        /**
         * Execute requestPaymentReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment report request response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentReportRequestResponse> _callback) throws ApiException {
            return requestPaymentReportAsync(paymentReportRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, signature, _callback);
        }
    }

    /**
     * Request a payment report
     * Request a report of payments to be sent to the given callback url. Callback schema defined in PaymentReportCallbackJSON. 
     * @param paymentReportRequest Payment body payload (required)
     * @return APIrequestPaymentReportRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment report request response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIrequestPaymentReportRequest requestPaymentReport(PaymentReportRequest paymentReportRequest) {
        return new APIrequestPaymentReportRequest(paymentReportRequest);
    }
    private okhttp3.Call requestPaymentReportBySettlementIdCall(String settlementId, PaymentReportBySettlementIdRequest paymentReportBySettlementIdRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentReportBySettlementIdRequest;

        // create path and map variables
        String localVarPath = "/settlements/{settlementId}/payments/report"
            .replace("{" + "settlementId" + "}", localVarApiClient.escapeString(settlementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkoutAccount != null) {
            localVarHeaderParams.put("checkout-account", localVarApiClient.parameterToString(checkoutAccount));
        }

        if (checkoutAlgorithm != null) {
            localVarHeaderParams.put("checkout-algorithm", localVarApiClient.parameterToString(checkoutAlgorithm));
        }

        if (checkoutMethod != null) {
            localVarHeaderParams.put("checkout-method", localVarApiClient.parameterToString(checkoutMethod));
        }

        if (checkoutTimestamp != null) {
            localVarHeaderParams.put("checkout-timestamp", localVarApiClient.parameterToString(checkoutTimestamp));
        }

        if (signature != null) {
            localVarHeaderParams.put("signature", localVarApiClient.parameterToString(signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestPaymentReportBySettlementIdValidateBeforeCall(String settlementId, PaymentReportBySettlementIdRequest paymentReportBySettlementIdRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'settlementId' is set
        if (settlementId == null) {
            throw new ApiException("Missing the required parameter 'settlementId' when calling requestPaymentReportBySettlementId(Async)");
        }

        // verify the required parameter 'paymentReportBySettlementIdRequest' is set
        if (paymentReportBySettlementIdRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentReportBySettlementIdRequest' when calling requestPaymentReportBySettlementId(Async)");
        }

        return requestPaymentReportBySettlementIdCall(settlementId, paymentReportBySettlementIdRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, signature, _callback);

    }


    private ApiResponse<PaymentReportRequestResponse> requestPaymentReportBySettlementIdWithHttpInfo(String settlementId, PaymentReportBySettlementIdRequest paymentReportBySettlementIdRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String signature) throws ApiException {
        okhttp3.Call localVarCall = requestPaymentReportBySettlementIdValidateBeforeCall(settlementId, paymentReportBySettlementIdRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, signature, null);
        Type localVarReturnType = new TypeToken<PaymentReportRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call requestPaymentReportBySettlementIdAsync(String settlementId, PaymentReportBySettlementIdRequest paymentReportBySettlementIdRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String signature, final ApiCallback<PaymentReportRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestPaymentReportBySettlementIdValidateBeforeCall(settlementId, paymentReportBySettlementIdRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, signature, _callback);
        Type localVarReturnType = new TypeToken<PaymentReportRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIrequestPaymentReportBySettlementIdRequest {
        private final String settlementId;
        private final PaymentReportBySettlementIdRequest paymentReportBySettlementIdRequest;
        private Integer checkoutAccount;
        private String checkoutAlgorithm;
        private String checkoutMethod;
        private OffsetDateTime checkoutTimestamp;
        private String signature;

        private APIrequestPaymentReportBySettlementIdRequest(String settlementId, PaymentReportBySettlementIdRequest paymentReportBySettlementIdRequest) {
            this.settlementId = settlementId;
            this.paymentReportBySettlementIdRequest = paymentReportBySettlementIdRequest;
        }

        /**
         * Set checkoutAccount
         * @param checkoutAccount Merchant ID (optional)
         * @return APIrequestPaymentReportBySettlementIdRequest
         */
        public APIrequestPaymentReportBySettlementIdRequest checkoutAccount(Integer checkoutAccount) {
            this.checkoutAccount = checkoutAccount;
            return this;
        }

        /**
         * Set checkoutAlgorithm
         * @param checkoutAlgorithm HMAC algorithm (optional)
         * @return APIrequestPaymentReportBySettlementIdRequest
         */
        public APIrequestPaymentReportBySettlementIdRequest checkoutAlgorithm(String checkoutAlgorithm) {
            this.checkoutAlgorithm = checkoutAlgorithm;
            return this;
        }

        /**
         * Set checkoutMethod
         * @param checkoutMethod HTTP method of the request (optional)
         * @return APIrequestPaymentReportBySettlementIdRequest
         */
        public APIrequestPaymentReportBySettlementIdRequest checkoutMethod(String checkoutMethod) {
            this.checkoutMethod = checkoutMethod;
            return this;
        }

        /**
         * Set checkoutTimestamp
         * @param checkoutTimestamp Current timestamp in ISO 8601 format (optional)
         * @return APIrequestPaymentReportBySettlementIdRequest
         */
        public APIrequestPaymentReportBySettlementIdRequest checkoutTimestamp(OffsetDateTime checkoutTimestamp) {
            this.checkoutTimestamp = checkoutTimestamp;
            return this;
        }

        /**
         * Set signature
         * @param signature HMAC signature calculated over the request headers and payload (optional)
         * @return APIrequestPaymentReportBySettlementIdRequest
         */
        public APIrequestPaymentReportBySettlementIdRequest signature(String signature) {
            this.signature = signature;
            return this;
        }

        /**
         * Build call for requestPaymentReportBySettlementId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment report request response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return requestPaymentReportBySettlementIdCall(settlementId, paymentReportBySettlementIdRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, signature, _callback);
        }

        /**
         * Execute requestPaymentReportBySettlementId request
         * @return PaymentReportRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment report request response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public PaymentReportRequestResponse execute() throws ApiException {
            ApiResponse<PaymentReportRequestResponse> localVarResp = requestPaymentReportBySettlementIdWithHttpInfo(settlementId, paymentReportBySettlementIdRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, signature);
            return localVarResp.getData();
        }

        /**
         * Execute requestPaymentReportBySettlementId request with HTTP info returned
         * @return ApiResponse&lt;PaymentReportRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment report request response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentReportRequestResponse> executeWithHttpInfo() throws ApiException {
            return requestPaymentReportBySettlementIdWithHttpInfo(settlementId, paymentReportBySettlementIdRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, signature);
        }

        /**
         * Execute requestPaymentReportBySettlementId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment report request response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentReportRequestResponse> _callback) throws ApiException {
            return requestPaymentReportBySettlementIdAsync(settlementId, paymentReportBySettlementIdRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, signature, _callback);
        }
    }

    /**
     * Request a report of payments contained in a given settlement
     * Request a report of payments contained in a given settlement to be sent to the given callback url. Callback schema defined in PaymentReportCallbackJSON. 
     * @param settlementId Settlement ID (required)
     * @param paymentReportBySettlementIdRequest Payment body payload (required)
     * @return APIrequestPaymentReportBySettlementIdRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment report request response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIrequestPaymentReportBySettlementIdRequest requestPaymentReportBySettlementId(String settlementId, PaymentReportBySettlementIdRequest paymentReportBySettlementIdRequest) {
        return new APIrequestPaymentReportBySettlementIdRequest(settlementId, paymentReportBySettlementIdRequest);
    }
}
