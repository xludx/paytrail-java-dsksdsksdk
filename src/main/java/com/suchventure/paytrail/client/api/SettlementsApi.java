/*
 * Payment API
 * Paytrail Payment API 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.suchventure.paytrail.client.api;

import com.suchventure.paytrail.client.ApiCallback;
import com.suchventure.paytrail.client.ApiClient;
import com.suchventure.paytrail.client.ApiException;
import com.suchventure.paytrail.client.ApiResponse;
import com.suchventure.paytrail.client.Configuration;
import com.suchventure.paytrail.client.Pair;
import com.suchventure.paytrail.client.ProgressRequestBody;
import com.suchventure.paytrail.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.suchventure.paytrail.client.model.Error;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import com.suchventure.paytrail.client.model.SettlementIdItem;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SettlementsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SettlementsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SettlementsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listSettlementIdsCall(LocalDate startDate, LocalDate endDate, String bankReference, Integer limit, Integer submerchant, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/settlements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (bankReference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bankReference", bankReference));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (submerchant != null) {
            localVarHeaderParams.put("submerchant", localVarApiClient.parameterToString(submerchant));
        }

        if (checkoutAccount != null) {
            localVarHeaderParams.put("checkout-account", localVarApiClient.parameterToString(checkoutAccount));
        }

        if (checkoutAlgorithm != null) {
            localVarHeaderParams.put("checkout-algorithm", localVarApiClient.parameterToString(checkoutAlgorithm));
        }

        if (checkoutMethod != null) {
            localVarHeaderParams.put("checkout-method", localVarApiClient.parameterToString(checkoutMethod));
        }

        if (checkoutTimestamp != null) {
            localVarHeaderParams.put("checkout-timestamp", localVarApiClient.parameterToString(checkoutTimestamp));
        }

        if (signature != null) {
            localVarHeaderParams.put("signature", localVarApiClient.parameterToString(signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSettlementIdsValidateBeforeCall(LocalDate startDate, LocalDate endDate, String bankReference, Integer limit, Integer submerchant, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String signature, final ApiCallback _callback) throws ApiException {
        return listSettlementIdsCall(startDate, endDate, bankReference, limit, submerchant, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, signature, _callback);

    }


    private ApiResponse<List<SettlementIdItem>> listSettlementIdsWithHttpInfo(LocalDate startDate, LocalDate endDate, String bankReference, Integer limit, Integer submerchant, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String signature) throws ApiException {
        okhttp3.Call localVarCall = listSettlementIdsValidateBeforeCall(startDate, endDate, bankReference, limit, submerchant, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, signature, null);
        Type localVarReturnType = new TypeToken<List<SettlementIdItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSettlementIdsAsync(LocalDate startDate, LocalDate endDate, String bankReference, Integer limit, Integer submerchant, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String signature, final ApiCallback<List<SettlementIdItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSettlementIdsValidateBeforeCall(startDate, endDate, bankReference, limit, submerchant, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, signature, _callback);
        Type localVarReturnType = new TypeToken<List<SettlementIdItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistSettlementIdsRequest {
        private LocalDate startDate;
        private LocalDate endDate;
        private String bankReference;
        private Integer limit;
        private Integer submerchant;
        private Integer checkoutAccount;
        private String checkoutAlgorithm;
        private String checkoutMethod;
        private OffsetDateTime checkoutTimestamp;
        private String signature;

        private APIlistSettlementIdsRequest() {
        }

        /**
         * Set startDate
         * @param startDate Filter out settlements created before given date. (optional)
         * @return APIlistSettlementIdsRequest
         */
        public APIlistSettlementIdsRequest startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }

        /**
         * Set endDate
         * @param endDate Filter out settlements created after given date. (optional)
         * @return APIlistSettlementIdsRequest
         */
        public APIlistSettlementIdsRequest endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }

        /**
         * Set bankReference
         * @param bankReference Only include settlements with the given bank reference (optional)
         * @return APIlistSettlementIdsRequest
         */
        public APIlistSettlementIdsRequest bankReference(String bankReference) {
            this.bankReference = bankReference;
            return this;
        }

        /**
         * Set limit
         * @param limit Limit the number of settlement IDs returned (optional)
         * @return APIlistSettlementIdsRequest
         */
        public APIlistSettlementIdsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set submerchant
         * @param submerchant Get submerchant&#39;s payment report (optional)
         * @return APIlistSettlementIdsRequest
         */
        public APIlistSettlementIdsRequest submerchant(Integer submerchant) {
            this.submerchant = submerchant;
            return this;
        }

        /**
         * Set checkoutAccount
         * @param checkoutAccount Merchant ID (optional)
         * @return APIlistSettlementIdsRequest
         */
        public APIlistSettlementIdsRequest checkoutAccount(Integer checkoutAccount) {
            this.checkoutAccount = checkoutAccount;
            return this;
        }

        /**
         * Set checkoutAlgorithm
         * @param checkoutAlgorithm HMAC algorithm (optional)
         * @return APIlistSettlementIdsRequest
         */
        public APIlistSettlementIdsRequest checkoutAlgorithm(String checkoutAlgorithm) {
            this.checkoutAlgorithm = checkoutAlgorithm;
            return this;
        }

        /**
         * Set checkoutMethod
         * @param checkoutMethod HTTP method of the request (optional)
         * @return APIlistSettlementIdsRequest
         */
        public APIlistSettlementIdsRequest checkoutMethod(String checkoutMethod) {
            this.checkoutMethod = checkoutMethod;
            return this;
        }

        /**
         * Set checkoutTimestamp
         * @param checkoutTimestamp Current timestamp in ISO 8601 format (optional)
         * @return APIlistSettlementIdsRequest
         */
        public APIlistSettlementIdsRequest checkoutTimestamp(OffsetDateTime checkoutTimestamp) {
            this.checkoutTimestamp = checkoutTimestamp;
            return this;
        }

        /**
         * Set signature
         * @param signature HMAC signature calculated over the request headers and payload (optional)
         * @return APIlistSettlementIdsRequest
         */
        public APIlistSettlementIdsRequest signature(String signature) {
            this.signature = signature;
            return this;
        }

        /**
         * Build call for listSettlementIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of settlement IDs </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSettlementIdsCall(startDate, endDate, bankReference, limit, submerchant, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, signature, _callback);
        }

        /**
         * Execute listSettlementIds request
         * @return List&lt;SettlementIdItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of settlement IDs </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public List<SettlementIdItem> execute() throws ApiException {
            ApiResponse<List<SettlementIdItem>> localVarResp = listSettlementIdsWithHttpInfo(startDate, endDate, bankReference, limit, submerchant, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, signature);
            return localVarResp.getData();
        }

        /**
         * Execute listSettlementIds request with HTTP info returned
         * @return ApiResponse&lt;List&lt;SettlementIdItem&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of settlement IDs </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<SettlementIdItem>> executeWithHttpInfo() throws ApiException {
            return listSettlementIdsWithHttpInfo(startDate, endDate, bankReference, limit, submerchant, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, signature);
        }

        /**
         * Execute listSettlementIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of settlement IDs </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<SettlementIdItem>> _callback) throws ApiException {
            return listSettlementIdsAsync(startDate, endDate, bankReference, limit, submerchant, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, signature, _callback);
        }
    }

    /**
     * List settlement IDs
     * Returns settlement IDs 
     * @return APIlistSettlementIdsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of settlement IDs </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIlistSettlementIdsRequest listSettlementIds() {
        return new APIlistSettlementIdsRequest();
    }
}
