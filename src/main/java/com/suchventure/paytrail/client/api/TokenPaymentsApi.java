/*
 * Payment API
 * Paytrail Payment API 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.suchventure.paytrail.client.api;

import com.suchventure.paytrail.client.ApiCallback;
import com.suchventure.paytrail.client.ApiClient;
import com.suchventure.paytrail.client.ApiException;
import com.suchventure.paytrail.client.ApiResponse;
import com.suchventure.paytrail.client.Configuration;
import com.suchventure.paytrail.client.Pair;
import com.suchventure.paytrail.client.ProgressRequestBody;
import com.suchventure.paytrail.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.suchventure.paytrail.client.model.AddCardFormRequest;
import com.suchventure.paytrail.client.model.Error;
import com.suchventure.paytrail.client.model.GetTokenRequest;
import java.time.OffsetDateTime;
import com.suchventure.paytrail.client.model.TokenCITPaymentResponse;
import com.suchventure.paytrail.client.model.TokenMITPaymentResponse;
import com.suchventure.paytrail.client.model.TokenPaymentRequest;
import com.suchventure.paytrail.client.model.TokenizationRequestResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TokenPaymentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TokenPaymentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TokenPaymentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCardFormCall(AddCardFormRequest addCardFormRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addCardFormRequest;

        // create path and map variables
        String localVarPath = "/tokenization/addcard-form";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCardFormValidateBeforeCall(AddCardFormRequest addCardFormRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addCardFormRequest' is set
        if (addCardFormRequest == null) {
            throw new ApiException("Missing the required parameter 'addCardFormRequest' when calling addCardForm(Async)");
        }

        return addCardFormCall(addCardFormRequest, _callback);

    }


    private ApiResponse<Void> addCardFormWithHttpInfo(AddCardFormRequest addCardFormRequest) throws ApiException {
        okhttp3.Call localVarCall = addCardFormValidateBeforeCall(addCardFormRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addCardFormAsync(AddCardFormRequest addCardFormRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCardFormValidateBeforeCall(addCardFormRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIaddCardFormRequest {
        private final AddCardFormRequest addCardFormRequest;

        private APIaddCardFormRequest(AddCardFormRequest addCardFormRequest) {
            this.addCardFormRequest = addCardFormRequest;
        }

        /**
         * Build call for addCardForm
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 302 </td><td> Redirect to card addition form (or checkout-redirect-cancel-url) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Tokenization not allowed for merchant </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addCardFormCall(addCardFormRequest, _callback);
        }

        /**
         * Execute addCardForm request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 302 </td><td> Redirect to card addition form (or checkout-redirect-cancel-url) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Tokenization not allowed for merchant </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            addCardFormWithHttpInfo(addCardFormRequest);
        }

        /**
         * Execute addCardForm request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 302 </td><td> Redirect to card addition form (or checkout-redirect-cancel-url) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Tokenization not allowed for merchant </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return addCardFormWithHttpInfo(addCardFormRequest);
        }

        /**
         * Execute addCardForm request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 302 </td><td> Redirect to card addition form (or checkout-redirect-cancel-url) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Tokenization not allowed for merchant </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return addCardFormAsync(addCardFormRequest, _callback);
        }
    }

    /**
     * Request a redirect to card addition form
     * Request a redirect to card addition form. This will redirect user to the card addition form, then back to Checkout servers, and finally to merchant&#39;s redirect url. 
     * @param addCardFormRequest Add card payload (required)
     * @return APIaddCardFormRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Redirect to card addition form (or checkout-redirect-cancel-url) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Tokenization not allowed for merchant </td><td>  -  </td></tr>
     </table>
     */
    public APIaddCardFormRequest addCardForm(AddCardFormRequest addCardFormRequest) {
        return new APIaddCardFormRequest(addCardFormRequest);
    }
    private okhttp3.Call requestTokenForTokenizationIdCall(UUID checkoutTokenizationId, GetTokenRequest getTokenRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, UUID checkoutTokenizationId2, String platformName, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getTokenRequest;

        // create path and map variables
        String localVarPath = "/tokenization/{checkout-tokenization-id}"
            .replace("{" + "checkout-tokenization-id" + "}", localVarApiClient.escapeString(checkoutTokenizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkoutAccount != null) {
            localVarHeaderParams.put("checkout-account", localVarApiClient.parameterToString(checkoutAccount));
        }

        if (checkoutAlgorithm != null) {
            localVarHeaderParams.put("checkout-algorithm", localVarApiClient.parameterToString(checkoutAlgorithm));
        }

        if (checkoutMethod != null) {
            localVarHeaderParams.put("checkout-method", localVarApiClient.parameterToString(checkoutMethod));
        }

        if (checkoutTimestamp != null) {
            localVarHeaderParams.put("checkout-timestamp", localVarApiClient.parameterToString(checkoutTimestamp));
        }

        if (checkoutNonce != null) {
            localVarHeaderParams.put("checkout-nonce", localVarApiClient.parameterToString(checkoutNonce));
        }

        if (checkoutTokenizationId2 != null) {
            localVarHeaderParams.put("checkout-tokenization-id", localVarApiClient.parameterToString(checkoutTokenizationId2));
        }

        if (platformName != null) {
            localVarHeaderParams.put("platform-name", localVarApiClient.parameterToString(platformName));
        }

        if (signature != null) {
            localVarHeaderParams.put("signature", localVarApiClient.parameterToString(signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestTokenForTokenizationIdValidateBeforeCall(UUID checkoutTokenizationId, GetTokenRequest getTokenRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, UUID checkoutTokenizationId2, String platformName, String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkoutTokenizationId' is set
        if (checkoutTokenizationId == null) {
            throw new ApiException("Missing the required parameter 'checkoutTokenizationId' when calling requestTokenForTokenizationId(Async)");
        }

        // verify the required parameter 'getTokenRequest' is set
        if (getTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'getTokenRequest' when calling requestTokenForTokenizationId(Async)");
        }

        return requestTokenForTokenizationIdCall(checkoutTokenizationId, getTokenRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, checkoutTokenizationId2, platformName, signature, _callback);

    }


    private ApiResponse<TokenizationRequestResponse> requestTokenForTokenizationIdWithHttpInfo(UUID checkoutTokenizationId, GetTokenRequest getTokenRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, UUID checkoutTokenizationId2, String platformName, String signature) throws ApiException {
        okhttp3.Call localVarCall = requestTokenForTokenizationIdValidateBeforeCall(checkoutTokenizationId, getTokenRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, checkoutTokenizationId2, platformName, signature, null);
        Type localVarReturnType = new TypeToken<TokenizationRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call requestTokenForTokenizationIdAsync(UUID checkoutTokenizationId, GetTokenRequest getTokenRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, UUID checkoutTokenizationId2, String platformName, String signature, final ApiCallback<TokenizationRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestTokenForTokenizationIdValidateBeforeCall(checkoutTokenizationId, getTokenRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, checkoutTokenizationId2, platformName, signature, _callback);
        Type localVarReturnType = new TypeToken<TokenizationRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIrequestTokenForTokenizationIdRequest {
        private final UUID checkoutTokenizationId;
        private final GetTokenRequest getTokenRequest;
        private Integer checkoutAccount;
        private String checkoutAlgorithm;
        private String checkoutMethod;
        private OffsetDateTime checkoutTimestamp;
        private String checkoutNonce;
        private UUID checkoutTokenizationId2;
        private String platformName;
        private String signature;

        private APIrequestTokenForTokenizationIdRequest(UUID checkoutTokenizationId, GetTokenRequest getTokenRequest) {
            this.checkoutTokenizationId = checkoutTokenizationId;
            this.getTokenRequest = getTokenRequest;
        }

        /**
         * Set checkoutAccount
         * @param checkoutAccount Merchant ID (optional)
         * @return APIrequestTokenForTokenizationIdRequest
         */
        public APIrequestTokenForTokenizationIdRequest checkoutAccount(Integer checkoutAccount) {
            this.checkoutAccount = checkoutAccount;
            return this;
        }

        /**
         * Set checkoutAlgorithm
         * @param checkoutAlgorithm HMAC algorithm (optional)
         * @return APIrequestTokenForTokenizationIdRequest
         */
        public APIrequestTokenForTokenizationIdRequest checkoutAlgorithm(String checkoutAlgorithm) {
            this.checkoutAlgorithm = checkoutAlgorithm;
            return this;
        }

        /**
         * Set checkoutMethod
         * @param checkoutMethod HTTP method of the request (optional)
         * @return APIrequestTokenForTokenizationIdRequest
         */
        public APIrequestTokenForTokenizationIdRequest checkoutMethod(String checkoutMethod) {
            this.checkoutMethod = checkoutMethod;
            return this;
        }

        /**
         * Set checkoutTimestamp
         * @param checkoutTimestamp Current timestamp in ISO 8601 format (optional)
         * @return APIrequestTokenForTokenizationIdRequest
         */
        public APIrequestTokenForTokenizationIdRequest checkoutTimestamp(OffsetDateTime checkoutTimestamp) {
            this.checkoutTimestamp = checkoutTimestamp;
            return this;
        }

        /**
         * Set checkoutNonce
         * @param checkoutNonce Unique random identifier (optional)
         * @return APIrequestTokenForTokenizationIdRequest
         */
        public APIrequestTokenForTokenizationIdRequest checkoutNonce(String checkoutNonce) {
            this.checkoutNonce = checkoutNonce;
            return this;
        }

        /**
         * Set checkoutTokenizationId2
         * @param checkoutTokenizationId2 Tokenization id received from /tokenization/addcard-form (optional)
         * @return APIrequestTokenForTokenizationIdRequest
         */
        public APIrequestTokenForTokenizationIdRequest checkoutTokenizationId2(UUID checkoutTokenizationId2) {
            this.checkoutTokenizationId2 = checkoutTokenizationId2;
            return this;
        }

        /**
         * Set platformName
         * @param platformName For SaaS services, use the marketing name of the platform (for example, shopify). For third party eCommerce platform plugins, use the platform name and your identifier, like company name (for example, woocommerce-yourcompany). Platform and integrator information helps customer service to provide better assistance for the merchants using the integration. (optional)
         * @return APIrequestTokenForTokenizationIdRequest
         */
        public APIrequestTokenForTokenizationIdRequest platformName(String platformName) {
            this.platformName = platformName;
            return this;
        }

        /**
         * Set signature
         * @param signature HMAC signature calculated over the request headers and payload (optional)
         * @return APIrequestTokenForTokenizationIdRequest
         */
        public APIrequestTokenForTokenizationIdRequest signature(String signature) {
            this.signature = signature;
            return this;
        }

        /**
         * Build call for requestTokenForTokenizationId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Tokenization request response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Credit cards and/or AMEX not enabled for merchant </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return requestTokenForTokenizationIdCall(checkoutTokenizationId, getTokenRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, checkoutTokenizationId2, platformName, signature, _callback);
        }

        /**
         * Execute requestTokenForTokenizationId request
         * @return TokenizationRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Tokenization request response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Credit cards and/or AMEX not enabled for merchant </td><td>  -  </td></tr>
         </table>
         */
        public TokenizationRequestResponse execute() throws ApiException {
            ApiResponse<TokenizationRequestResponse> localVarResp = requestTokenForTokenizationIdWithHttpInfo(checkoutTokenizationId, getTokenRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, checkoutTokenizationId2, platformName, signature);
            return localVarResp.getData();
        }

        /**
         * Execute requestTokenForTokenizationId request with HTTP info returned
         * @return ApiResponse&lt;TokenizationRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Tokenization request response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Credit cards and/or AMEX not enabled for merchant </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TokenizationRequestResponse> executeWithHttpInfo() throws ApiException {
            return requestTokenForTokenizationIdWithHttpInfo(checkoutTokenizationId, getTokenRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, checkoutTokenizationId2, platformName, signature);
        }

        /**
         * Execute requestTokenForTokenizationId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Tokenization request response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Credit cards and/or AMEX not enabled for merchant </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TokenizationRequestResponse> _callback) throws ApiException {
            return requestTokenForTokenizationIdAsync(checkoutTokenizationId, getTokenRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, checkoutTokenizationId2, platformName, signature, _callback);
        }
    }

    /**
     * Request a card token for given tokenization id
     * Use checkout-tokenization-id received from /tokenization/addcard-form redirect to request a token which can be used for payments. 
     * @param checkoutTokenizationId Tokenization id received from /tokenization/addcard-form (required)
     * @param getTokenRequest Tokenization request payload (required)
     * @return APIrequestTokenForTokenizationIdRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tokenization request response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credit cards and/or AMEX not enabled for merchant </td><td>  -  </td></tr>
     </table>
     */
    public APIrequestTokenForTokenizationIdRequest requestTokenForTokenizationId(UUID checkoutTokenizationId, GetTokenRequest getTokenRequest) {
        return new APIrequestTokenForTokenizationIdRequest(checkoutTokenizationId, getTokenRequest);
    }
    private okhttp3.Call tokenCitAuthorizationHoldCall(TokenPaymentRequest tokenPaymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tokenPaymentRequest;

        // create path and map variables
        String localVarPath = "/payments/token/cit/authorization-hold";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkoutAccount != null) {
            localVarHeaderParams.put("checkout-account", localVarApiClient.parameterToString(checkoutAccount));
        }

        if (checkoutAlgorithm != null) {
            localVarHeaderParams.put("checkout-algorithm", localVarApiClient.parameterToString(checkoutAlgorithm));
        }

        if (checkoutMethod != null) {
            localVarHeaderParams.put("checkout-method", localVarApiClient.parameterToString(checkoutMethod));
        }

        if (checkoutTimestamp != null) {
            localVarHeaderParams.put("checkout-timestamp", localVarApiClient.parameterToString(checkoutTimestamp));
        }

        if (checkoutNonce != null) {
            localVarHeaderParams.put("checkout-nonce", localVarApiClient.parameterToString(checkoutNonce));
        }

        if (platformName != null) {
            localVarHeaderParams.put("platform-name", localVarApiClient.parameterToString(platformName));
        }

        if (signature != null) {
            localVarHeaderParams.put("signature", localVarApiClient.parameterToString(signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokenCitAuthorizationHoldValidateBeforeCall(TokenPaymentRequest tokenPaymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenPaymentRequest' is set
        if (tokenPaymentRequest == null) {
            throw new ApiException("Missing the required parameter 'tokenPaymentRequest' when calling tokenCitAuthorizationHold(Async)");
        }

        return tokenCitAuthorizationHoldCall(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);

    }


    private ApiResponse<TokenMITPaymentResponse> tokenCitAuthorizationHoldWithHttpInfo(TokenPaymentRequest tokenPaymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature) throws ApiException {
        okhttp3.Call localVarCall = tokenCitAuthorizationHoldValidateBeforeCall(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, null);
        Type localVarReturnType = new TypeToken<TokenMITPaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call tokenCitAuthorizationHoldAsync(TokenPaymentRequest tokenPaymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback<TokenMITPaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokenCitAuthorizationHoldValidateBeforeCall(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        Type localVarReturnType = new TypeToken<TokenMITPaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItokenCitAuthorizationHoldRequest {
        private final TokenPaymentRequest tokenPaymentRequest;
        private Integer checkoutAccount;
        private String checkoutAlgorithm;
        private String checkoutMethod;
        private OffsetDateTime checkoutTimestamp;
        private String checkoutNonce;
        private String platformName;
        private String signature;

        private APItokenCitAuthorizationHoldRequest(TokenPaymentRequest tokenPaymentRequest) {
            this.tokenPaymentRequest = tokenPaymentRequest;
        }

        /**
         * Set checkoutAccount
         * @param checkoutAccount Merchant ID (optional)
         * @return APItokenCitAuthorizationHoldRequest
         */
        public APItokenCitAuthorizationHoldRequest checkoutAccount(Integer checkoutAccount) {
            this.checkoutAccount = checkoutAccount;
            return this;
        }

        /**
         * Set checkoutAlgorithm
         * @param checkoutAlgorithm HMAC algorithm (optional)
         * @return APItokenCitAuthorizationHoldRequest
         */
        public APItokenCitAuthorizationHoldRequest checkoutAlgorithm(String checkoutAlgorithm) {
            this.checkoutAlgorithm = checkoutAlgorithm;
            return this;
        }

        /**
         * Set checkoutMethod
         * @param checkoutMethod HTTP method of the request (optional)
         * @return APItokenCitAuthorizationHoldRequest
         */
        public APItokenCitAuthorizationHoldRequest checkoutMethod(String checkoutMethod) {
            this.checkoutMethod = checkoutMethod;
            return this;
        }

        /**
         * Set checkoutTimestamp
         * @param checkoutTimestamp Current timestamp in ISO 8601 format (optional)
         * @return APItokenCitAuthorizationHoldRequest
         */
        public APItokenCitAuthorizationHoldRequest checkoutTimestamp(OffsetDateTime checkoutTimestamp) {
            this.checkoutTimestamp = checkoutTimestamp;
            return this;
        }

        /**
         * Set checkoutNonce
         * @param checkoutNonce Unique random identifier (optional)
         * @return APItokenCitAuthorizationHoldRequest
         */
        public APItokenCitAuthorizationHoldRequest checkoutNonce(String checkoutNonce) {
            this.checkoutNonce = checkoutNonce;
            return this;
        }

        /**
         * Set platformName
         * @param platformName For SaaS services, use the marketing name of the platform (for example, shopify). For third party eCommerce platform plugins, use the platform name and your identifier, like company name (for example, woocommerce-yourcompany). Platform and integrator information helps customer service to provide better assistance for the merchants using the integration. (optional)
         * @return APItokenCitAuthorizationHoldRequest
         */
        public APItokenCitAuthorizationHoldRequest platformName(String platformName) {
            this.platformName = platformName;
            return this;
        }

        /**
         * Set signature
         * @param signature HMAC signature calculated over the request headers and payload (optional)
         * @return APItokenCitAuthorizationHoldRequest
         */
        public APItokenCitAuthorizationHoldRequest signature(String signature) {
            this.signature = signature;
            return this;
        }

        /**
         * Build call for tokenCitAuthorizationHold
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CIT authorization hold request created successfully. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> CIT authorization hold requires 3DS authentication step up. Please redirect user to given URL. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return tokenCitAuthorizationHoldCall(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        }

        /**
         * Execute tokenCitAuthorizationHold request
         * @return TokenMITPaymentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CIT authorization hold request created successfully. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> CIT authorization hold requires 3DS authentication step up. Please redirect user to given URL. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public TokenMITPaymentResponse execute() throws ApiException {
            ApiResponse<TokenMITPaymentResponse> localVarResp = tokenCitAuthorizationHoldWithHttpInfo(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature);
            return localVarResp.getData();
        }

        /**
         * Execute tokenCitAuthorizationHold request with HTTP info returned
         * @return ApiResponse&lt;TokenMITPaymentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CIT authorization hold request created successfully. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> CIT authorization hold requires 3DS authentication step up. Please redirect user to given URL. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TokenMITPaymentResponse> executeWithHttpInfo() throws ApiException {
            return tokenCitAuthorizationHoldWithHttpInfo(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature);
        }

        /**
         * Execute tokenCitAuthorizationHold request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CIT authorization hold request created successfully. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> CIT authorization hold requires 3DS authentication step up. Please redirect user to given URL. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TokenMITPaymentResponse> _callback) throws ApiException {
            return tokenCitAuthorizationHoldAsync(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        }
    }

    /**
     * Request customer initiated transaction authorization hold on token
     * Request customer initiated transaction authorization hold on token. CIT authorization holds can sometimes require further 3DS authentication step-up. See detailed documentation at https://checkoutfinland.github.io/psp-api/#/?id&#x3D;customer-initiated-transactions-cit 
     * @param tokenPaymentRequest CIT authorization hold payload (required)
     * @return APItokenCitAuthorizationHoldRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CIT authorization hold request created successfully. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> CIT authorization hold requires 3DS authentication step up. Please redirect user to given URL. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APItokenCitAuthorizationHoldRequest tokenCitAuthorizationHold(TokenPaymentRequest tokenPaymentRequest) {
        return new APItokenCitAuthorizationHoldRequest(tokenPaymentRequest);
    }
    private okhttp3.Call tokenCitChargeCall(TokenPaymentRequest tokenPaymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tokenPaymentRequest;

        // create path and map variables
        String localVarPath = "/payments/token/cit/charge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkoutAccount != null) {
            localVarHeaderParams.put("checkout-account", localVarApiClient.parameterToString(checkoutAccount));
        }

        if (checkoutAlgorithm != null) {
            localVarHeaderParams.put("checkout-algorithm", localVarApiClient.parameterToString(checkoutAlgorithm));
        }

        if (checkoutMethod != null) {
            localVarHeaderParams.put("checkout-method", localVarApiClient.parameterToString(checkoutMethod));
        }

        if (checkoutTimestamp != null) {
            localVarHeaderParams.put("checkout-timestamp", localVarApiClient.parameterToString(checkoutTimestamp));
        }

        if (checkoutNonce != null) {
            localVarHeaderParams.put("checkout-nonce", localVarApiClient.parameterToString(checkoutNonce));
        }

        if (platformName != null) {
            localVarHeaderParams.put("platform-name", localVarApiClient.parameterToString(platformName));
        }

        if (signature != null) {
            localVarHeaderParams.put("signature", localVarApiClient.parameterToString(signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokenCitChargeValidateBeforeCall(TokenPaymentRequest tokenPaymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenPaymentRequest' is set
        if (tokenPaymentRequest == null) {
            throw new ApiException("Missing the required parameter 'tokenPaymentRequest' when calling tokenCitCharge(Async)");
        }

        return tokenCitChargeCall(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);

    }


    private ApiResponse<TokenMITPaymentResponse> tokenCitChargeWithHttpInfo(TokenPaymentRequest tokenPaymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature) throws ApiException {
        okhttp3.Call localVarCall = tokenCitChargeValidateBeforeCall(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, null);
        Type localVarReturnType = new TypeToken<TokenMITPaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call tokenCitChargeAsync(TokenPaymentRequest tokenPaymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback<TokenMITPaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokenCitChargeValidateBeforeCall(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        Type localVarReturnType = new TypeToken<TokenMITPaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItokenCitChargeRequest {
        private final TokenPaymentRequest tokenPaymentRequest;
        private Integer checkoutAccount;
        private String checkoutAlgorithm;
        private String checkoutMethod;
        private OffsetDateTime checkoutTimestamp;
        private String checkoutNonce;
        private String platformName;
        private String signature;

        private APItokenCitChargeRequest(TokenPaymentRequest tokenPaymentRequest) {
            this.tokenPaymentRequest = tokenPaymentRequest;
        }

        /**
         * Set checkoutAccount
         * @param checkoutAccount Merchant ID (optional)
         * @return APItokenCitChargeRequest
         */
        public APItokenCitChargeRequest checkoutAccount(Integer checkoutAccount) {
            this.checkoutAccount = checkoutAccount;
            return this;
        }

        /**
         * Set checkoutAlgorithm
         * @param checkoutAlgorithm HMAC algorithm (optional)
         * @return APItokenCitChargeRequest
         */
        public APItokenCitChargeRequest checkoutAlgorithm(String checkoutAlgorithm) {
            this.checkoutAlgorithm = checkoutAlgorithm;
            return this;
        }

        /**
         * Set checkoutMethod
         * @param checkoutMethod HTTP method of the request (optional)
         * @return APItokenCitChargeRequest
         */
        public APItokenCitChargeRequest checkoutMethod(String checkoutMethod) {
            this.checkoutMethod = checkoutMethod;
            return this;
        }

        /**
         * Set checkoutTimestamp
         * @param checkoutTimestamp Current timestamp in ISO 8601 format (optional)
         * @return APItokenCitChargeRequest
         */
        public APItokenCitChargeRequest checkoutTimestamp(OffsetDateTime checkoutTimestamp) {
            this.checkoutTimestamp = checkoutTimestamp;
            return this;
        }

        /**
         * Set checkoutNonce
         * @param checkoutNonce Unique random identifier (optional)
         * @return APItokenCitChargeRequest
         */
        public APItokenCitChargeRequest checkoutNonce(String checkoutNonce) {
            this.checkoutNonce = checkoutNonce;
            return this;
        }

        /**
         * Set platformName
         * @param platformName For SaaS services, use the marketing name of the platform (for example, shopify). For third party eCommerce platform plugins, use the platform name and your identifier, like company name (for example, woocommerce-yourcompany). Platform and integrator information helps customer service to provide better assistance for the merchants using the integration. (optional)
         * @return APItokenCitChargeRequest
         */
        public APItokenCitChargeRequest platformName(String platformName) {
            this.platformName = platformName;
            return this;
        }

        /**
         * Set signature
         * @param signature HMAC signature calculated over the request headers and payload (optional)
         * @return APItokenCitChargeRequest
         */
        public APItokenCitChargeRequest signature(String signature) {
            this.signature = signature;
            return this;
        }

        /**
         * Build call for tokenCitCharge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CIT charge request created successfully. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> CIT charge requires 3DS authentication step up. Please redirect user to given URL. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return tokenCitChargeCall(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        }

        /**
         * Execute tokenCitCharge request
         * @return TokenMITPaymentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CIT charge request created successfully. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> CIT charge requires 3DS authentication step up. Please redirect user to given URL. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public TokenMITPaymentResponse execute() throws ApiException {
            ApiResponse<TokenMITPaymentResponse> localVarResp = tokenCitChargeWithHttpInfo(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature);
            return localVarResp.getData();
        }

        /**
         * Execute tokenCitCharge request with HTTP info returned
         * @return ApiResponse&lt;TokenMITPaymentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CIT charge request created successfully. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> CIT charge requires 3DS authentication step up. Please redirect user to given URL. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TokenMITPaymentResponse> executeWithHttpInfo() throws ApiException {
            return tokenCitChargeWithHttpInfo(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature);
        }

        /**
         * Execute tokenCitCharge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CIT charge request created successfully. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> CIT charge requires 3DS authentication step up. Please redirect user to given URL. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TokenMITPaymentResponse> _callback) throws ApiException {
            return tokenCitChargeAsync(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        }
    }

    /**
     * Request customer initiated transaction charge on token
     * Request customer initiated transaction charge on token. CIT charges can sometimes require further 3DS authentication step-up. See detailed documentation at https://checkoutfinland.github.io/psp-api/#/?id&#x3D;customer-initiated-transactions-cit 
     * @param tokenPaymentRequest CIT Charge payload (required)
     * @return APItokenCitChargeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CIT charge request created successfully. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> CIT charge requires 3DS authentication step up. Please redirect user to given URL. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APItokenCitChargeRequest tokenCitCharge(TokenPaymentRequest tokenPaymentRequest) {
        return new APItokenCitChargeRequest(tokenPaymentRequest);
    }
    private okhttp3.Call tokenCommitCall(UUID transactionId, TokenPaymentRequest tokenPaymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, UUID checkoutTransactionId, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tokenPaymentRequest;

        // create path and map variables
        String localVarPath = "/payments/{transactionId}/token/commit"
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkoutAccount != null) {
            localVarHeaderParams.put("checkout-account", localVarApiClient.parameterToString(checkoutAccount));
        }

        if (checkoutAlgorithm != null) {
            localVarHeaderParams.put("checkout-algorithm", localVarApiClient.parameterToString(checkoutAlgorithm));
        }

        if (checkoutMethod != null) {
            localVarHeaderParams.put("checkout-method", localVarApiClient.parameterToString(checkoutMethod));
        }

        if (checkoutTransactionId != null) {
            localVarHeaderParams.put("checkout-transaction-id", localVarApiClient.parameterToString(checkoutTransactionId));
        }

        if (checkoutTimestamp != null) {
            localVarHeaderParams.put("checkout-timestamp", localVarApiClient.parameterToString(checkoutTimestamp));
        }

        if (checkoutNonce != null) {
            localVarHeaderParams.put("checkout-nonce", localVarApiClient.parameterToString(checkoutNonce));
        }

        if (platformName != null) {
            localVarHeaderParams.put("platform-name", localVarApiClient.parameterToString(platformName));
        }

        if (signature != null) {
            localVarHeaderParams.put("signature", localVarApiClient.parameterToString(signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokenCommitValidateBeforeCall(UUID transactionId, TokenPaymentRequest tokenPaymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, UUID checkoutTransactionId, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling tokenCommit(Async)");
        }

        // verify the required parameter 'tokenPaymentRequest' is set
        if (tokenPaymentRequest == null) {
            throw new ApiException("Missing the required parameter 'tokenPaymentRequest' when calling tokenCommit(Async)");
        }

        return tokenCommitCall(transactionId, tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);

    }


    private ApiResponse<TokenMITPaymentResponse> tokenCommitWithHttpInfo(UUID transactionId, TokenPaymentRequest tokenPaymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, UUID checkoutTransactionId, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature) throws ApiException {
        okhttp3.Call localVarCall = tokenCommitValidateBeforeCall(transactionId, tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature, null);
        Type localVarReturnType = new TypeToken<TokenMITPaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call tokenCommitAsync(UUID transactionId, TokenPaymentRequest tokenPaymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, UUID checkoutTransactionId, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback<TokenMITPaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokenCommitValidateBeforeCall(transactionId, tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        Type localVarReturnType = new TypeToken<TokenMITPaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItokenCommitRequest {
        private final UUID transactionId;
        private final TokenPaymentRequest tokenPaymentRequest;
        private Integer checkoutAccount;
        private String checkoutAlgorithm;
        private String checkoutMethod;
        private UUID checkoutTransactionId;
        private OffsetDateTime checkoutTimestamp;
        private String checkoutNonce;
        private String platformName;
        private String signature;

        private APItokenCommitRequest(UUID transactionId, TokenPaymentRequest tokenPaymentRequest) {
            this.transactionId = transactionId;
            this.tokenPaymentRequest = tokenPaymentRequest;
        }

        /**
         * Set checkoutAccount
         * @param checkoutAccount Merchant ID (optional)
         * @return APItokenCommitRequest
         */
        public APItokenCommitRequest checkoutAccount(Integer checkoutAccount) {
            this.checkoutAccount = checkoutAccount;
            return this;
        }

        /**
         * Set checkoutAlgorithm
         * @param checkoutAlgorithm HMAC algorithm (optional)
         * @return APItokenCommitRequest
         */
        public APItokenCommitRequest checkoutAlgorithm(String checkoutAlgorithm) {
            this.checkoutAlgorithm = checkoutAlgorithm;
            return this;
        }

        /**
         * Set checkoutMethod
         * @param checkoutMethod HTTP method of the request (optional)
         * @return APItokenCommitRequest
         */
        public APItokenCommitRequest checkoutMethod(String checkoutMethod) {
            this.checkoutMethod = checkoutMethod;
            return this;
        }

        /**
         * Set checkoutTransactionId
         * @param checkoutTransactionId The same transaction ID as in route (optional)
         * @return APItokenCommitRequest
         */
        public APItokenCommitRequest checkoutTransactionId(UUID checkoutTransactionId) {
            this.checkoutTransactionId = checkoutTransactionId;
            return this;
        }

        /**
         * Set checkoutTimestamp
         * @param checkoutTimestamp Current timestamp in ISO 8601 format (optional)
         * @return APItokenCommitRequest
         */
        public APItokenCommitRequest checkoutTimestamp(OffsetDateTime checkoutTimestamp) {
            this.checkoutTimestamp = checkoutTimestamp;
            return this;
        }

        /**
         * Set checkoutNonce
         * @param checkoutNonce Unique random identifier (optional)
         * @return APItokenCommitRequest
         */
        public APItokenCommitRequest checkoutNonce(String checkoutNonce) {
            this.checkoutNonce = checkoutNonce;
            return this;
        }

        /**
         * Set platformName
         * @param platformName For SaaS services, use the marketing name of the platform (for example, shopify). For third party eCommerce platform plugins, use the platform name and your identifier, like company name (for example, woocommerce-yourcompany). Platform and integrator information helps customer service to provide better assistance for the merchants using the integration. (optional)
         * @return APItokenCommitRequest
         */
        public APItokenCommitRequest platformName(String platformName) {
            this.platformName = platformName;
            return this;
        }

        /**
         * Set signature
         * @param signature HMAC signature calculated over the request headers and payload (optional)
         * @return APItokenCommitRequest
         */
        public APItokenCommitRequest signature(String signature) {
            this.signature = signature;
            return this;
        }

        /**
         * Build call for tokenCommit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CIT authorization hold committed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return tokenCommitCall(transactionId, tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        }

        /**
         * Execute tokenCommit request
         * @return TokenMITPaymentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CIT authorization hold committed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public TokenMITPaymentResponse execute() throws ApiException {
            ApiResponse<TokenMITPaymentResponse> localVarResp = tokenCommitWithHttpInfo(transactionId, tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature);
            return localVarResp.getData();
        }

        /**
         * Execute tokenCommit request with HTTP info returned
         * @return ApiResponse&lt;TokenMITPaymentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CIT authorization hold committed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TokenMITPaymentResponse> executeWithHttpInfo() throws ApiException {
            return tokenCommitWithHttpInfo(transactionId, tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature);
        }

        /**
         * Execute tokenCommit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> CIT authorization hold committed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TokenMITPaymentResponse> _callback) throws ApiException {
            return tokenCommitAsync(transactionId, tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        }
    }

    /**
     * Request committing (charging) of previously created authorization hold on token
     * Request committing of previously created authorization hold. The final amount committed can either equal or be less than the authorization hold. The committed amount may not exceed the authorization hold. The final items may differ from the ones used when creating the authorization hold. 
     * @param transactionId The transaction ID (required)
     * @param tokenPaymentRequest CIT commit payload (required)
     * @return APItokenCommitRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CIT authorization hold committed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APItokenCommitRequest tokenCommit(UUID transactionId, TokenPaymentRequest tokenPaymentRequest) {
        return new APItokenCommitRequest(transactionId, tokenPaymentRequest);
    }
    private okhttp3.Call tokenMitAuthorizationHoldCall(TokenPaymentRequest tokenPaymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tokenPaymentRequest;

        // create path and map variables
        String localVarPath = "/payments/token/mit/authorization-hold";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkoutAccount != null) {
            localVarHeaderParams.put("checkout-account", localVarApiClient.parameterToString(checkoutAccount));
        }

        if (checkoutAlgorithm != null) {
            localVarHeaderParams.put("checkout-algorithm", localVarApiClient.parameterToString(checkoutAlgorithm));
        }

        if (checkoutMethod != null) {
            localVarHeaderParams.put("checkout-method", localVarApiClient.parameterToString(checkoutMethod));
        }

        if (checkoutTimestamp != null) {
            localVarHeaderParams.put("checkout-timestamp", localVarApiClient.parameterToString(checkoutTimestamp));
        }

        if (checkoutNonce != null) {
            localVarHeaderParams.put("checkout-nonce", localVarApiClient.parameterToString(checkoutNonce));
        }

        if (platformName != null) {
            localVarHeaderParams.put("platform-name", localVarApiClient.parameterToString(platformName));
        }

        if (signature != null) {
            localVarHeaderParams.put("signature", localVarApiClient.parameterToString(signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokenMitAuthorizationHoldValidateBeforeCall(TokenPaymentRequest tokenPaymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenPaymentRequest' is set
        if (tokenPaymentRequest == null) {
            throw new ApiException("Missing the required parameter 'tokenPaymentRequest' when calling tokenMitAuthorizationHold(Async)");
        }

        return tokenMitAuthorizationHoldCall(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);

    }


    private ApiResponse<TokenMITPaymentResponse> tokenMitAuthorizationHoldWithHttpInfo(TokenPaymentRequest tokenPaymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature) throws ApiException {
        okhttp3.Call localVarCall = tokenMitAuthorizationHoldValidateBeforeCall(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, null);
        Type localVarReturnType = new TypeToken<TokenMITPaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call tokenMitAuthorizationHoldAsync(TokenPaymentRequest tokenPaymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback<TokenMITPaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokenMitAuthorizationHoldValidateBeforeCall(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        Type localVarReturnType = new TypeToken<TokenMITPaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItokenMitAuthorizationHoldRequest {
        private final TokenPaymentRequest tokenPaymentRequest;
        private Integer checkoutAccount;
        private String checkoutAlgorithm;
        private String checkoutMethod;
        private OffsetDateTime checkoutTimestamp;
        private String checkoutNonce;
        private String platformName;
        private String signature;

        private APItokenMitAuthorizationHoldRequest(TokenPaymentRequest tokenPaymentRequest) {
            this.tokenPaymentRequest = tokenPaymentRequest;
        }

        /**
         * Set checkoutAccount
         * @param checkoutAccount Merchant ID (optional)
         * @return APItokenMitAuthorizationHoldRequest
         */
        public APItokenMitAuthorizationHoldRequest checkoutAccount(Integer checkoutAccount) {
            this.checkoutAccount = checkoutAccount;
            return this;
        }

        /**
         * Set checkoutAlgorithm
         * @param checkoutAlgorithm HMAC algorithm (optional)
         * @return APItokenMitAuthorizationHoldRequest
         */
        public APItokenMitAuthorizationHoldRequest checkoutAlgorithm(String checkoutAlgorithm) {
            this.checkoutAlgorithm = checkoutAlgorithm;
            return this;
        }

        /**
         * Set checkoutMethod
         * @param checkoutMethod HTTP method of the request (optional)
         * @return APItokenMitAuthorizationHoldRequest
         */
        public APItokenMitAuthorizationHoldRequest checkoutMethod(String checkoutMethod) {
            this.checkoutMethod = checkoutMethod;
            return this;
        }

        /**
         * Set checkoutTimestamp
         * @param checkoutTimestamp Current timestamp in ISO 8601 format (optional)
         * @return APItokenMitAuthorizationHoldRequest
         */
        public APItokenMitAuthorizationHoldRequest checkoutTimestamp(OffsetDateTime checkoutTimestamp) {
            this.checkoutTimestamp = checkoutTimestamp;
            return this;
        }

        /**
         * Set checkoutNonce
         * @param checkoutNonce Unique random identifier (optional)
         * @return APItokenMitAuthorizationHoldRequest
         */
        public APItokenMitAuthorizationHoldRequest checkoutNonce(String checkoutNonce) {
            this.checkoutNonce = checkoutNonce;
            return this;
        }

        /**
         * Set platformName
         * @param platformName For SaaS services, use the marketing name of the platform (for example, shopify). For third party eCommerce platform plugins, use the platform name and your identifier, like company name (for example, woocommerce-yourcompany). Platform and integrator information helps customer service to provide better assistance for the merchants using the integration. (optional)
         * @return APItokenMitAuthorizationHoldRequest
         */
        public APItokenMitAuthorizationHoldRequest platformName(String platformName) {
            this.platformName = platformName;
            return this;
        }

        /**
         * Set signature
         * @param signature HMAC signature calculated over the request headers and payload (optional)
         * @return APItokenMitAuthorizationHoldRequest
         */
        public APItokenMitAuthorizationHoldRequest signature(String signature) {
            this.signature = signature;
            return this;
        }

        /**
         * Build call for tokenMitAuthorizationHold
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> MIT authorization hold request created successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return tokenMitAuthorizationHoldCall(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        }

        /**
         * Execute tokenMitAuthorizationHold request
         * @return TokenMITPaymentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> MIT authorization hold request created successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public TokenMITPaymentResponse execute() throws ApiException {
            ApiResponse<TokenMITPaymentResponse> localVarResp = tokenMitAuthorizationHoldWithHttpInfo(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature);
            return localVarResp.getData();
        }

        /**
         * Execute tokenMitAuthorizationHold request with HTTP info returned
         * @return ApiResponse&lt;TokenMITPaymentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> MIT authorization hold request created successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TokenMITPaymentResponse> executeWithHttpInfo() throws ApiException {
            return tokenMitAuthorizationHoldWithHttpInfo(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature);
        }

        /**
         * Execute tokenMitAuthorizationHold request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> MIT authorization hold request created successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TokenMITPaymentResponse> _callback) throws ApiException {
            return tokenMitAuthorizationHoldAsync(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        }
    }

    /**
     * Request merchant initiated transaction authorization hold on token
     * Request merchant initiated transaction authorization hold on token. This method should be used when creating an authorization hold on the customer&#39;s card in a context, where the customer is not actively participating in the transaction. 
     * @param tokenPaymentRequest MIT Charge payload (required)
     * @return APItokenMitAuthorizationHoldRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> MIT authorization hold request created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APItokenMitAuthorizationHoldRequest tokenMitAuthorizationHold(TokenPaymentRequest tokenPaymentRequest) {
        return new APItokenMitAuthorizationHoldRequest(tokenPaymentRequest);
    }
    private okhttp3.Call tokenMitChargeCall(TokenPaymentRequest tokenPaymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tokenPaymentRequest;

        // create path and map variables
        String localVarPath = "/payments/token/mit/charge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkoutAccount != null) {
            localVarHeaderParams.put("checkout-account", localVarApiClient.parameterToString(checkoutAccount));
        }

        if (checkoutAlgorithm != null) {
            localVarHeaderParams.put("checkout-algorithm", localVarApiClient.parameterToString(checkoutAlgorithm));
        }

        if (checkoutMethod != null) {
            localVarHeaderParams.put("checkout-method", localVarApiClient.parameterToString(checkoutMethod));
        }

        if (checkoutTimestamp != null) {
            localVarHeaderParams.put("checkout-timestamp", localVarApiClient.parameterToString(checkoutTimestamp));
        }

        if (checkoutNonce != null) {
            localVarHeaderParams.put("checkout-nonce", localVarApiClient.parameterToString(checkoutNonce));
        }

        if (platformName != null) {
            localVarHeaderParams.put("platform-name", localVarApiClient.parameterToString(platformName));
        }

        if (signature != null) {
            localVarHeaderParams.put("signature", localVarApiClient.parameterToString(signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokenMitChargeValidateBeforeCall(TokenPaymentRequest tokenPaymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenPaymentRequest' is set
        if (tokenPaymentRequest == null) {
            throw new ApiException("Missing the required parameter 'tokenPaymentRequest' when calling tokenMitCharge(Async)");
        }

        return tokenMitChargeCall(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);

    }


    private ApiResponse<TokenMITPaymentResponse> tokenMitChargeWithHttpInfo(TokenPaymentRequest tokenPaymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature) throws ApiException {
        okhttp3.Call localVarCall = tokenMitChargeValidateBeforeCall(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, null);
        Type localVarReturnType = new TypeToken<TokenMITPaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call tokenMitChargeAsync(TokenPaymentRequest tokenPaymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback<TokenMITPaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokenMitChargeValidateBeforeCall(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        Type localVarReturnType = new TypeToken<TokenMITPaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItokenMitChargeRequest {
        private final TokenPaymentRequest tokenPaymentRequest;
        private Integer checkoutAccount;
        private String checkoutAlgorithm;
        private String checkoutMethod;
        private OffsetDateTime checkoutTimestamp;
        private String checkoutNonce;
        private String platformName;
        private String signature;

        private APItokenMitChargeRequest(TokenPaymentRequest tokenPaymentRequest) {
            this.tokenPaymentRequest = tokenPaymentRequest;
        }

        /**
         * Set checkoutAccount
         * @param checkoutAccount Merchant ID (optional)
         * @return APItokenMitChargeRequest
         */
        public APItokenMitChargeRequest checkoutAccount(Integer checkoutAccount) {
            this.checkoutAccount = checkoutAccount;
            return this;
        }

        /**
         * Set checkoutAlgorithm
         * @param checkoutAlgorithm HMAC algorithm (optional)
         * @return APItokenMitChargeRequest
         */
        public APItokenMitChargeRequest checkoutAlgorithm(String checkoutAlgorithm) {
            this.checkoutAlgorithm = checkoutAlgorithm;
            return this;
        }

        /**
         * Set checkoutMethod
         * @param checkoutMethod HTTP method of the request (optional)
         * @return APItokenMitChargeRequest
         */
        public APItokenMitChargeRequest checkoutMethod(String checkoutMethod) {
            this.checkoutMethod = checkoutMethod;
            return this;
        }

        /**
         * Set checkoutTimestamp
         * @param checkoutTimestamp Current timestamp in ISO 8601 format (optional)
         * @return APItokenMitChargeRequest
         */
        public APItokenMitChargeRequest checkoutTimestamp(OffsetDateTime checkoutTimestamp) {
            this.checkoutTimestamp = checkoutTimestamp;
            return this;
        }

        /**
         * Set checkoutNonce
         * @param checkoutNonce Unique random identifier (optional)
         * @return APItokenMitChargeRequest
         */
        public APItokenMitChargeRequest checkoutNonce(String checkoutNonce) {
            this.checkoutNonce = checkoutNonce;
            return this;
        }

        /**
         * Set platformName
         * @param platformName For SaaS services, use the marketing name of the platform (for example, shopify). For third party eCommerce platform plugins, use the platform name and your identifier, like company name (for example, woocommerce-yourcompany). Platform and integrator information helps customer service to provide better assistance for the merchants using the integration. (optional)
         * @return APItokenMitChargeRequest
         */
        public APItokenMitChargeRequest platformName(String platformName) {
            this.platformName = platformName;
            return this;
        }

        /**
         * Set signature
         * @param signature HMAC signature calculated over the request headers and payload (optional)
         * @return APItokenMitChargeRequest
         */
        public APItokenMitChargeRequest signature(String signature) {
            this.signature = signature;
            return this;
        }

        /**
         * Build call for tokenMitCharge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> MIT charge request created successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return tokenMitChargeCall(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        }

        /**
         * Execute tokenMitCharge request
         * @return TokenMITPaymentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> MIT charge request created successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public TokenMITPaymentResponse execute() throws ApiException {
            ApiResponse<TokenMITPaymentResponse> localVarResp = tokenMitChargeWithHttpInfo(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature);
            return localVarResp.getData();
        }

        /**
         * Execute tokenMitCharge request with HTTP info returned
         * @return ApiResponse&lt;TokenMITPaymentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> MIT charge request created successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TokenMITPaymentResponse> executeWithHttpInfo() throws ApiException {
            return tokenMitChargeWithHttpInfo(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature);
        }

        /**
         * Execute tokenMitCharge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> MIT charge request created successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TokenMITPaymentResponse> _callback) throws ApiException {
            return tokenMitChargeAsync(tokenPaymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        }
    }

    /**
     * Request merchant initiated transaction charge on token
     * Request merchant initiated transaction charge on token. This method should be used when charging the customer&#39;s card in a context, where the customer is not actively participating in the transaction. 
     * @param tokenPaymentRequest MIT Charge payload (required)
     * @return APItokenMitChargeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> MIT charge request created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APItokenMitChargeRequest tokenMitCharge(TokenPaymentRequest tokenPaymentRequest) {
        return new APItokenMitChargeRequest(tokenPaymentRequest);
    }
    private okhttp3.Call tokenRevertCall(UUID transactionId, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, UUID checkoutTransactionId, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/{transactionId}/token/revert"
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkoutAccount != null) {
            localVarHeaderParams.put("checkout-account", localVarApiClient.parameterToString(checkoutAccount));
        }

        if (checkoutAlgorithm != null) {
            localVarHeaderParams.put("checkout-algorithm", localVarApiClient.parameterToString(checkoutAlgorithm));
        }

        if (checkoutMethod != null) {
            localVarHeaderParams.put("checkout-method", localVarApiClient.parameterToString(checkoutMethod));
        }

        if (checkoutTransactionId != null) {
            localVarHeaderParams.put("checkout-transaction-id", localVarApiClient.parameterToString(checkoutTransactionId));
        }

        if (checkoutTimestamp != null) {
            localVarHeaderParams.put("checkout-timestamp", localVarApiClient.parameterToString(checkoutTimestamp));
        }

        if (checkoutNonce != null) {
            localVarHeaderParams.put("checkout-nonce", localVarApiClient.parameterToString(checkoutNonce));
        }

        if (platformName != null) {
            localVarHeaderParams.put("platform-name", localVarApiClient.parameterToString(platformName));
        }

        if (signature != null) {
            localVarHeaderParams.put("signature", localVarApiClient.parameterToString(signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokenRevertValidateBeforeCall(UUID transactionId, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, UUID checkoutTransactionId, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling tokenRevert(Async)");
        }

        return tokenRevertCall(transactionId, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);

    }


    private ApiResponse<TokenMITPaymentResponse> tokenRevertWithHttpInfo(UUID transactionId, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, UUID checkoutTransactionId, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature) throws ApiException {
        okhttp3.Call localVarCall = tokenRevertValidateBeforeCall(transactionId, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature, null);
        Type localVarReturnType = new TypeToken<TokenMITPaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call tokenRevertAsync(UUID transactionId, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, UUID checkoutTransactionId, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback<TokenMITPaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokenRevertValidateBeforeCall(transactionId, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        Type localVarReturnType = new TypeToken<TokenMITPaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItokenRevertRequest {
        private final UUID transactionId;
        private Integer checkoutAccount;
        private String checkoutAlgorithm;
        private String checkoutMethod;
        private UUID checkoutTransactionId;
        private OffsetDateTime checkoutTimestamp;
        private String checkoutNonce;
        private String platformName;
        private String signature;

        private APItokenRevertRequest(UUID transactionId) {
            this.transactionId = transactionId;
        }

        /**
         * Set checkoutAccount
         * @param checkoutAccount Merchant ID (optional)
         * @return APItokenRevertRequest
         */
        public APItokenRevertRequest checkoutAccount(Integer checkoutAccount) {
            this.checkoutAccount = checkoutAccount;
            return this;
        }

        /**
         * Set checkoutAlgorithm
         * @param checkoutAlgorithm HMAC algorithm (optional)
         * @return APItokenRevertRequest
         */
        public APItokenRevertRequest checkoutAlgorithm(String checkoutAlgorithm) {
            this.checkoutAlgorithm = checkoutAlgorithm;
            return this;
        }

        /**
         * Set checkoutMethod
         * @param checkoutMethod HTTP method of the request (optional)
         * @return APItokenRevertRequest
         */
        public APItokenRevertRequest checkoutMethod(String checkoutMethod) {
            this.checkoutMethod = checkoutMethod;
            return this;
        }

        /**
         * Set checkoutTransactionId
         * @param checkoutTransactionId The same transaction ID as in route (optional)
         * @return APItokenRevertRequest
         */
        public APItokenRevertRequest checkoutTransactionId(UUID checkoutTransactionId) {
            this.checkoutTransactionId = checkoutTransactionId;
            return this;
        }

        /**
         * Set checkoutTimestamp
         * @param checkoutTimestamp Current timestamp in ISO 8601 format (optional)
         * @return APItokenRevertRequest
         */
        public APItokenRevertRequest checkoutTimestamp(OffsetDateTime checkoutTimestamp) {
            this.checkoutTimestamp = checkoutTimestamp;
            return this;
        }

        /**
         * Set checkoutNonce
         * @param checkoutNonce Unique random identifier (optional)
         * @return APItokenRevertRequest
         */
        public APItokenRevertRequest checkoutNonce(String checkoutNonce) {
            this.checkoutNonce = checkoutNonce;
            return this;
        }

        /**
         * Set platformName
         * @param platformName For SaaS services, use the marketing name of the platform (for example, shopify). For third party eCommerce platform plugins, use the platform name and your identifier, like company name (for example, woocommerce-yourcompany). Platform and integrator information helps customer service to provide better assistance for the merchants using the integration. (optional)
         * @return APItokenRevertRequest
         */
        public APItokenRevertRequest platformName(String platformName) {
            this.platformName = platformName;
            return this;
        }

        /**
         * Set signature
         * @param signature HMAC signature calculated over the request headers and payload (optional)
         * @return APItokenRevertRequest
         */
        public APItokenRevertRequest signature(String signature) {
            this.signature = signature;
            return this;
        }

        /**
         * Build call for tokenRevert
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Authorization hold reverted successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return tokenRevertCall(transactionId, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        }

        /**
         * Execute tokenRevert request
         * @return TokenMITPaymentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Authorization hold reverted successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public TokenMITPaymentResponse execute() throws ApiException {
            ApiResponse<TokenMITPaymentResponse> localVarResp = tokenRevertWithHttpInfo(transactionId, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature);
            return localVarResp.getData();
        }

        /**
         * Execute tokenRevert request with HTTP info returned
         * @return ApiResponse&lt;TokenMITPaymentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Authorization hold reverted successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TokenMITPaymentResponse> executeWithHttpInfo() throws ApiException {
            return tokenRevertWithHttpInfo(transactionId, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature);
        }

        /**
         * Execute tokenRevert request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Authorization hold reverted successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TokenMITPaymentResponse> _callback) throws ApiException {
            return tokenRevertAsync(transactionId, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        }
    }

    /**
     * Revert (removal) of previously created authorization hold on token
     * Request committing of previously created authorization hold. A successful revert will remove the authorization hold from the payer&#39;s bank account. 
     * @param transactionId The transaction ID (required)
     * @return APItokenRevertRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization hold reverted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APItokenRevertRequest tokenRevert(UUID transactionId) {
        return new APItokenRevertRequest(transactionId);
    }
}
