/*
 * Payment API
 * Paytrail Payment API 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.suchventure.paytrail.client.api;

import com.suchventure.paytrail.client.ApiCallback;
import com.suchventure.paytrail.client.ApiClient;
import com.suchventure.paytrail.client.ApiException;
import com.suchventure.paytrail.client.ApiResponse;
import com.suchventure.paytrail.client.Configuration;
import com.suchventure.paytrail.client.Pair;
import com.suchventure.paytrail.client.ProgressRequestBody;
import com.suchventure.paytrail.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.suchventure.paytrail.client.model.ActivateInvoiceResponse;
import com.suchventure.paytrail.client.model.BasePaymentMethodProvider;
import com.suchventure.paytrail.client.model.Error;
import com.suchventure.paytrail.client.model.GroupedPaymentProvidersResponse;
import java.time.OffsetDateTime;
import com.suchventure.paytrail.client.model.Payment;
import com.suchventure.paytrail.client.model.PaymentRequest;
import com.suchventure.paytrail.client.model.PaymentRequestResponse;
import com.suchventure.paytrail.client.model.Refund;
import com.suchventure.paytrail.client.model.RefundResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call activateInvoiceByTransactionIdCall(UUID transactionId, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, UUID checkoutTransactionId, OffsetDateTime checkoutTimestamp, String checkoutNonce, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/{transactionId}/activate-invoice"
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkoutAccount != null) {
            localVarHeaderParams.put("checkout-account", localVarApiClient.parameterToString(checkoutAccount));
        }

        if (checkoutAlgorithm != null) {
            localVarHeaderParams.put("checkout-algorithm", localVarApiClient.parameterToString(checkoutAlgorithm));
        }

        if (checkoutMethod != null) {
            localVarHeaderParams.put("checkout-method", localVarApiClient.parameterToString(checkoutMethod));
        }

        if (checkoutTransactionId != null) {
            localVarHeaderParams.put("checkout-transaction-id", localVarApiClient.parameterToString(checkoutTransactionId));
        }

        if (checkoutTimestamp != null) {
            localVarHeaderParams.put("checkout-timestamp", localVarApiClient.parameterToString(checkoutTimestamp));
        }

        if (checkoutNonce != null) {
            localVarHeaderParams.put("checkout-nonce", localVarApiClient.parameterToString(checkoutNonce));
        }

        if (signature != null) {
            localVarHeaderParams.put("signature", localVarApiClient.parameterToString(signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateInvoiceByTransactionIdValidateBeforeCall(UUID transactionId, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, UUID checkoutTransactionId, OffsetDateTime checkoutTimestamp, String checkoutNonce, String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling activateInvoiceByTransactionId(Async)");
        }

        return activateInvoiceByTransactionIdCall(transactionId, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, signature, _callback);

    }


    private ApiResponse<ActivateInvoiceResponse> activateInvoiceByTransactionIdWithHttpInfo(UUID transactionId, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, UUID checkoutTransactionId, OffsetDateTime checkoutTimestamp, String checkoutNonce, String signature) throws ApiException {
        okhttp3.Call localVarCall = activateInvoiceByTransactionIdValidateBeforeCall(transactionId, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, signature, null);
        Type localVarReturnType = new TypeToken<ActivateInvoiceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call activateInvoiceByTransactionIdAsync(UUID transactionId, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, UUID checkoutTransactionId, OffsetDateTime checkoutTimestamp, String checkoutNonce, String signature, final ApiCallback<ActivateInvoiceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateInvoiceByTransactionIdValidateBeforeCall(transactionId, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, signature, _callback);
        Type localVarReturnType = new TypeToken<ActivateInvoiceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIactivateInvoiceByTransactionIdRequest {
        private final UUID transactionId;
        private Integer checkoutAccount;
        private String checkoutAlgorithm;
        private String checkoutMethod;
        private UUID checkoutTransactionId;
        private OffsetDateTime checkoutTimestamp;
        private String checkoutNonce;
        private String signature;

        private APIactivateInvoiceByTransactionIdRequest(UUID transactionId) {
            this.transactionId = transactionId;
        }

        /**
         * Set checkoutAccount
         * @param checkoutAccount Merchant ID (optional)
         * @return APIactivateInvoiceByTransactionIdRequest
         */
        public APIactivateInvoiceByTransactionIdRequest checkoutAccount(Integer checkoutAccount) {
            this.checkoutAccount = checkoutAccount;
            return this;
        }

        /**
         * Set checkoutAlgorithm
         * @param checkoutAlgorithm HMAC algorithm (optional)
         * @return APIactivateInvoiceByTransactionIdRequest
         */
        public APIactivateInvoiceByTransactionIdRequest checkoutAlgorithm(String checkoutAlgorithm) {
            this.checkoutAlgorithm = checkoutAlgorithm;
            return this;
        }

        /**
         * Set checkoutMethod
         * @param checkoutMethod HTTP method of the request (optional)
         * @return APIactivateInvoiceByTransactionIdRequest
         */
        public APIactivateInvoiceByTransactionIdRequest checkoutMethod(String checkoutMethod) {
            this.checkoutMethod = checkoutMethod;
            return this;
        }

        /**
         * Set checkoutTransactionId
         * @param checkoutTransactionId The same transaction ID as in route (optional)
         * @return APIactivateInvoiceByTransactionIdRequest
         */
        public APIactivateInvoiceByTransactionIdRequest checkoutTransactionId(UUID checkoutTransactionId) {
            this.checkoutTransactionId = checkoutTransactionId;
            return this;
        }

        /**
         * Set checkoutTimestamp
         * @param checkoutTimestamp Current timestamp in ISO 8601 format (optional)
         * @return APIactivateInvoiceByTransactionIdRequest
         */
        public APIactivateInvoiceByTransactionIdRequest checkoutTimestamp(OffsetDateTime checkoutTimestamp) {
            this.checkoutTimestamp = checkoutTimestamp;
            return this;
        }

        /**
         * Set checkoutNonce
         * @param checkoutNonce Unique random identifier (optional)
         * @return APIactivateInvoiceByTransactionIdRequest
         */
        public APIactivateInvoiceByTransactionIdRequest checkoutNonce(String checkoutNonce) {
            this.checkoutNonce = checkoutNonce;
            return this;
        }

        /**
         * Set signature
         * @param signature HMAC signature calculated over the request headers and payload (optional)
         * @return APIactivateInvoiceByTransactionIdRequest
         */
        public APIactivateInvoiceByTransactionIdRequest signature(String signature) {
            this.signature = signature;
            return this;
        }

        /**
         * Build call for activateInvoiceByTransactionId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invoice activated succesfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return activateInvoiceByTransactionIdCall(transactionId, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, signature, _callback);
        }

        /**
         * Execute activateInvoiceByTransactionId request
         * @return ActivateInvoiceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invoice activated succesfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ActivateInvoiceResponse execute() throws ApiException {
            ApiResponse<ActivateInvoiceResponse> localVarResp = activateInvoiceByTransactionIdWithHttpInfo(transactionId, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, signature);
            return localVarResp.getData();
        }

        /**
         * Execute activateInvoiceByTransactionId request with HTTP info returned
         * @return ApiResponse&lt;ActivateInvoiceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invoice activated succesfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ActivateInvoiceResponse> executeWithHttpInfo() throws ApiException {
            return activateInvoiceByTransactionIdWithHttpInfo(transactionId, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, signature);
        }

        /**
         * Execute activateInvoiceByTransactionId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invoice activated succesfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ActivateInvoiceResponse> _callback) throws ApiException {
            return activateInvoiceByTransactionIdAsync(transactionId, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, signature, _callback);
        }
    }

    /**
     * Activate invoice
     * Manually activate invoice by transaction ID. Can only be used if payment was paid with Collector and is in pending status. 
     * @param transactionId Transaction ID of payment to activate invoice (required)
     * @return APIactivateInvoiceByTransactionIdRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice activated succesfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIactivateInvoiceByTransactionIdRequest activateInvoiceByTransactionId(UUID transactionId) {
        return new APIactivateInvoiceByTransactionIdRequest(transactionId);
    }
    private okhttp3.Call createPaymentCall(PaymentRequest paymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentRequest;

        // create path and map variables
        String localVarPath = "/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkoutAccount != null) {
            localVarHeaderParams.put("checkout-account", localVarApiClient.parameterToString(checkoutAccount));
        }

        if (checkoutAlgorithm != null) {
            localVarHeaderParams.put("checkout-algorithm", localVarApiClient.parameterToString(checkoutAlgorithm));
        }

        if (checkoutMethod != null) {
            localVarHeaderParams.put("checkout-method", localVarApiClient.parameterToString(checkoutMethod));
        }

        if (checkoutTimestamp != null) {
            localVarHeaderParams.put("checkout-timestamp", localVarApiClient.parameterToString(checkoutTimestamp));
        }

        if (checkoutNonce != null) {
            localVarHeaderParams.put("checkout-nonce", localVarApiClient.parameterToString(checkoutNonce));
        }

        if (platformName != null) {
            localVarHeaderParams.put("platform-name", localVarApiClient.parameterToString(platformName));
        }

        if (signature != null) {
            localVarHeaderParams.put("signature", localVarApiClient.parameterToString(signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentValidateBeforeCall(PaymentRequest paymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentRequest' is set
        if (paymentRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentRequest' when calling createPayment(Async)");
        }

        return createPaymentCall(paymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);

    }


    private ApiResponse<PaymentRequestResponse> createPaymentWithHttpInfo(PaymentRequest paymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature) throws ApiException {
        okhttp3.Call localVarCall = createPaymentValidateBeforeCall(paymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, null);
        Type localVarReturnType = new TypeToken<PaymentRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPaymentAsync(PaymentRequest paymentRequest, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback<PaymentRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentValidateBeforeCall(paymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        Type localVarReturnType = new TypeToken<PaymentRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreatePaymentRequest {
        private final PaymentRequest paymentRequest;
        private Integer checkoutAccount;
        private String checkoutAlgorithm;
        private String checkoutMethod;
        private OffsetDateTime checkoutTimestamp;
        private String checkoutNonce;
        private String platformName;
        private String signature;

        private APIcreatePaymentRequest(PaymentRequest paymentRequest) {
            this.paymentRequest = paymentRequest;
        }

        /**
         * Set checkoutAccount
         * @param checkoutAccount Merchant ID (optional)
         * @return APIcreatePaymentRequest
         */
        public APIcreatePaymentRequest checkoutAccount(Integer checkoutAccount) {
            this.checkoutAccount = checkoutAccount;
            return this;
        }

        /**
         * Set checkoutAlgorithm
         * @param checkoutAlgorithm HMAC algorithm (optional)
         * @return APIcreatePaymentRequest
         */
        public APIcreatePaymentRequest checkoutAlgorithm(String checkoutAlgorithm) {
            this.checkoutAlgorithm = checkoutAlgorithm;
            return this;
        }

        /**
         * Set checkoutMethod
         * @param checkoutMethod HTTP method of the request (optional)
         * @return APIcreatePaymentRequest
         */
        public APIcreatePaymentRequest checkoutMethod(String checkoutMethod) {
            this.checkoutMethod = checkoutMethod;
            return this;
        }

        /**
         * Set checkoutTimestamp
         * @param checkoutTimestamp Current timestamp in ISO 8601 format (optional)
         * @return APIcreatePaymentRequest
         */
        public APIcreatePaymentRequest checkoutTimestamp(OffsetDateTime checkoutTimestamp) {
            this.checkoutTimestamp = checkoutTimestamp;
            return this;
        }

        /**
         * Set checkoutNonce
         * @param checkoutNonce Unique random identifier (optional)
         * @return APIcreatePaymentRequest
         */
        public APIcreatePaymentRequest checkoutNonce(String checkoutNonce) {
            this.checkoutNonce = checkoutNonce;
            return this;
        }

        /**
         * Set platformName
         * @param platformName For SaaS services, use the marketing name of the platform (for example, shopify). For third party eCommerce platform plugins, use the platform name and your identifier, like company name (for example, woocommerce-yourcompany). Platform and integrator information helps customer service to provide better assistance for the merchants using the integration. (optional)
         * @return APIcreatePaymentRequest
         */
        public APIcreatePaymentRequest platformName(String platformName) {
            this.platformName = platformName;
            return this;
        }

        /**
         * Set signature
         * @param signature HMAC signature calculated over the request headers and payload (optional)
         * @return APIcreatePaymentRequest
         */
        public APIcreatePaymentRequest signature(String signature) {
            this.signature = signature;
            return this;
        }

        /**
         * Build call for createPayment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Payment request created successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createPaymentCall(paymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        }

        /**
         * Execute createPayment request
         * @return PaymentRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Payment request created successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public PaymentRequestResponse execute() throws ApiException {
            ApiResponse<PaymentRequestResponse> localVarResp = createPaymentWithHttpInfo(paymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature);
            return localVarResp.getData();
        }

        /**
         * Execute createPayment request with HTTP info returned
         * @return ApiResponse&lt;PaymentRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Payment request created successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentRequestResponse> executeWithHttpInfo() throws ApiException {
            return createPaymentWithHttpInfo(paymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature);
        }

        /**
         * Execute createPayment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Payment request created successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentRequestResponse> _callback) throws ApiException {
            return createPaymentAsync(paymentRequest, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        }
    }

    /**
     * Create a new open payment
     * Create a new open payment, returns a list of available payment methods.
     * @param paymentRequest Payment body payload (required)
     * @return APIcreatePaymentRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Payment request created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIcreatePaymentRequest createPayment(PaymentRequest paymentRequest) {
        return new APIcreatePaymentRequest(paymentRequest);
    }
    private okhttp3.Call getGroupedPaymentProvidersCall(Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String signature, Integer amount, List<String> groups, String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchants/grouped-payment-providers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (groups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "groups", groups));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (checkoutAccount != null) {
            localVarHeaderParams.put("checkout-account", localVarApiClient.parameterToString(checkoutAccount));
        }

        if (checkoutAlgorithm != null) {
            localVarHeaderParams.put("checkout-algorithm", localVarApiClient.parameterToString(checkoutAlgorithm));
        }

        if (checkoutMethod != null) {
            localVarHeaderParams.put("checkout-method", localVarApiClient.parameterToString(checkoutMethod));
        }

        if (checkoutTimestamp != null) {
            localVarHeaderParams.put("checkout-timestamp", localVarApiClient.parameterToString(checkoutTimestamp));
        }

        if (checkoutNonce != null) {
            localVarHeaderParams.put("checkout-nonce", localVarApiClient.parameterToString(checkoutNonce));
        }

        if (signature != null) {
            localVarHeaderParams.put("signature", localVarApiClient.parameterToString(signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupedPaymentProvidersValidateBeforeCall(Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String signature, Integer amount, List<String> groups, String language, final ApiCallback _callback) throws ApiException {
        return getGroupedPaymentProvidersCall(checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, signature, amount, groups, language, _callback);

    }


    private ApiResponse<GroupedPaymentProvidersResponse> getGroupedPaymentProvidersWithHttpInfo(Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String signature, Integer amount, List<String> groups, String language) throws ApiException {
        okhttp3.Call localVarCall = getGroupedPaymentProvidersValidateBeforeCall(checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, signature, amount, groups, language, null);
        Type localVarReturnType = new TypeToken<GroupedPaymentProvidersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGroupedPaymentProvidersAsync(Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String signature, Integer amount, List<String> groups, String language, final ApiCallback<GroupedPaymentProvidersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupedPaymentProvidersValidateBeforeCall(checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, signature, amount, groups, language, _callback);
        Type localVarReturnType = new TypeToken<GroupedPaymentProvidersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetGroupedPaymentProvidersRequest {
        private Integer checkoutAccount;
        private String checkoutAlgorithm;
        private String checkoutMethod;
        private OffsetDateTime checkoutTimestamp;
        private String checkoutNonce;
        private String signature;
        private Integer amount;
        private List<String> groups;
        private String language;

        private APIgetGroupedPaymentProvidersRequest() {
        }

        /**
         * Set checkoutAccount
         * @param checkoutAccount Merchant ID (optional)
         * @return APIgetGroupedPaymentProvidersRequest
         */
        public APIgetGroupedPaymentProvidersRequest checkoutAccount(Integer checkoutAccount) {
            this.checkoutAccount = checkoutAccount;
            return this;
        }

        /**
         * Set checkoutAlgorithm
         * @param checkoutAlgorithm HMAC algorithm (optional)
         * @return APIgetGroupedPaymentProvidersRequest
         */
        public APIgetGroupedPaymentProvidersRequest checkoutAlgorithm(String checkoutAlgorithm) {
            this.checkoutAlgorithm = checkoutAlgorithm;
            return this;
        }

        /**
         * Set checkoutMethod
         * @param checkoutMethod HTTP method of the request (optional)
         * @return APIgetGroupedPaymentProvidersRequest
         */
        public APIgetGroupedPaymentProvidersRequest checkoutMethod(String checkoutMethod) {
            this.checkoutMethod = checkoutMethod;
            return this;
        }

        /**
         * Set checkoutTimestamp
         * @param checkoutTimestamp Current timestamp in ISO 8601 format (optional)
         * @return APIgetGroupedPaymentProvidersRequest
         */
        public APIgetGroupedPaymentProvidersRequest checkoutTimestamp(OffsetDateTime checkoutTimestamp) {
            this.checkoutTimestamp = checkoutTimestamp;
            return this;
        }

        /**
         * Set checkoutNonce
         * @param checkoutNonce Unique random identifier (optional)
         * @return APIgetGroupedPaymentProvidersRequest
         */
        public APIgetGroupedPaymentProvidersRequest checkoutNonce(String checkoutNonce) {
            this.checkoutNonce = checkoutNonce;
            return this;
        }

        /**
         * Set signature
         * @param signature HMAC signature calculated over the request headers and payload (optional)
         * @return APIgetGroupedPaymentProvidersRequest
         */
        public APIgetGroupedPaymentProvidersRequest signature(String signature) {
            this.signature = signature;
            return this;
        }

        /**
         * Set amount
         * @param amount Optional amount in minor unit (eg. EUR cents) for the payment providers. Some providers have minimum or maximum amounts that can be purchased.  (optional)
         * @return APIgetGroupedPaymentProvidersRequest
         */
        public APIgetGroupedPaymentProvidersRequest amount(Integer amount) {
            this.amount = amount;
            return this;
        }

        /**
         * Set groups
         * @param groups Comma separated list of payment method groups to include in the reply. (optional)
         * @return APIgetGroupedPaymentProvidersRequest
         */
        public APIgetGroupedPaymentProvidersRequest groups(List<String> groups) {
            this.groups = groups;
            return this;
        }

        /**
         * Set language
         * @param language Language code of the language the terms of payment and the payment group names will be localized in. Defaults to FI if left undefined  (optional)
         * @return APIgetGroupedPaymentProvidersRequest
         */
        public APIgetGroupedPaymentProvidersRequest language(String language) {
            this.language = language;
            return this;
        }

        /**
         * Build call for getGroupedPaymentProviders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment methods available </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGroupedPaymentProvidersCall(checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, signature, amount, groups, language, _callback);
        }

        /**
         * Execute getGroupedPaymentProviders request
         * @return GroupedPaymentProvidersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment methods available </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public GroupedPaymentProvidersResponse execute() throws ApiException {
            ApiResponse<GroupedPaymentProvidersResponse> localVarResp = getGroupedPaymentProvidersWithHttpInfo(checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, signature, amount, groups, language);
            return localVarResp.getData();
        }

        /**
         * Execute getGroupedPaymentProviders request with HTTP info returned
         * @return ApiResponse&lt;GroupedPaymentProvidersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment methods available </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupedPaymentProvidersResponse> executeWithHttpInfo() throws ApiException {
            return getGroupedPaymentProvidersWithHttpInfo(checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, signature, amount, groups, language);
        }

        /**
         * Execute getGroupedPaymentProviders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment methods available </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupedPaymentProvidersResponse> _callback) throws ApiException {
            return getGroupedPaymentProvidersAsync(checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, signature, amount, groups, language, _callback);
        }
    }

    /**
     * List grouped merchant payment methods
     * Similar to the /merchants/payment-providers, but in addition of a flat list of providers, it returns payment group data containing localized names, icon URLs and grouped providers, and a localized text with a link to the terms of payment. 
     * @return APIgetGroupedPaymentProvidersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment methods available </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIgetGroupedPaymentProvidersRequest getGroupedPaymentProviders() {
        return new APIgetGroupedPaymentProvidersRequest();
    }
    private okhttp3.Call getPaymentByTransactionIdCall(UUID transactionId, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, UUID checkoutTransactionId, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/{transactionId}"
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkoutAccount != null) {
            localVarHeaderParams.put("checkout-account", localVarApiClient.parameterToString(checkoutAccount));
        }

        if (checkoutAlgorithm != null) {
            localVarHeaderParams.put("checkout-algorithm", localVarApiClient.parameterToString(checkoutAlgorithm));
        }

        if (checkoutMethod != null) {
            localVarHeaderParams.put("checkout-method", localVarApiClient.parameterToString(checkoutMethod));
        }

        if (checkoutTransactionId != null) {
            localVarHeaderParams.put("checkout-transaction-id", localVarApiClient.parameterToString(checkoutTransactionId));
        }

        if (checkoutTimestamp != null) {
            localVarHeaderParams.put("checkout-timestamp", localVarApiClient.parameterToString(checkoutTimestamp));
        }

        if (checkoutNonce != null) {
            localVarHeaderParams.put("checkout-nonce", localVarApiClient.parameterToString(checkoutNonce));
        }

        if (platformName != null) {
            localVarHeaderParams.put("platform-name", localVarApiClient.parameterToString(platformName));
        }

        if (signature != null) {
            localVarHeaderParams.put("signature", localVarApiClient.parameterToString(signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentByTransactionIdValidateBeforeCall(UUID transactionId, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, UUID checkoutTransactionId, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling getPaymentByTransactionId(Async)");
        }

        return getPaymentByTransactionIdCall(transactionId, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);

    }


    private ApiResponse<Payment> getPaymentByTransactionIdWithHttpInfo(UUID transactionId, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, UUID checkoutTransactionId, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature) throws ApiException {
        okhttp3.Call localVarCall = getPaymentByTransactionIdValidateBeforeCall(transactionId, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature, null);
        Type localVarReturnType = new TypeToken<Payment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPaymentByTransactionIdAsync(UUID transactionId, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, UUID checkoutTransactionId, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback<Payment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentByTransactionIdValidateBeforeCall(transactionId, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        Type localVarReturnType = new TypeToken<Payment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPaymentByTransactionIdRequest {
        private final UUID transactionId;
        private Integer checkoutAccount;
        private String checkoutAlgorithm;
        private String checkoutMethod;
        private UUID checkoutTransactionId;
        private OffsetDateTime checkoutTimestamp;
        private String checkoutNonce;
        private String platformName;
        private String signature;

        private APIgetPaymentByTransactionIdRequest(UUID transactionId) {
            this.transactionId = transactionId;
        }

        /**
         * Set checkoutAccount
         * @param checkoutAccount Merchant ID (optional)
         * @return APIgetPaymentByTransactionIdRequest
         */
        public APIgetPaymentByTransactionIdRequest checkoutAccount(Integer checkoutAccount) {
            this.checkoutAccount = checkoutAccount;
            return this;
        }

        /**
         * Set checkoutAlgorithm
         * @param checkoutAlgorithm HMAC algorithm (optional)
         * @return APIgetPaymentByTransactionIdRequest
         */
        public APIgetPaymentByTransactionIdRequest checkoutAlgorithm(String checkoutAlgorithm) {
            this.checkoutAlgorithm = checkoutAlgorithm;
            return this;
        }

        /**
         * Set checkoutMethod
         * @param checkoutMethod HTTP method of the request (optional)
         * @return APIgetPaymentByTransactionIdRequest
         */
        public APIgetPaymentByTransactionIdRequest checkoutMethod(String checkoutMethod) {
            this.checkoutMethod = checkoutMethod;
            return this;
        }

        /**
         * Set checkoutTransactionId
         * @param checkoutTransactionId The same transaction ID as in route (optional)
         * @return APIgetPaymentByTransactionIdRequest
         */
        public APIgetPaymentByTransactionIdRequest checkoutTransactionId(UUID checkoutTransactionId) {
            this.checkoutTransactionId = checkoutTransactionId;
            return this;
        }

        /**
         * Set checkoutTimestamp
         * @param checkoutTimestamp Current timestamp in ISO 8601 format (optional)
         * @return APIgetPaymentByTransactionIdRequest
         */
        public APIgetPaymentByTransactionIdRequest checkoutTimestamp(OffsetDateTime checkoutTimestamp) {
            this.checkoutTimestamp = checkoutTimestamp;
            return this;
        }

        /**
         * Set checkoutNonce
         * @param checkoutNonce Unique random identifier (optional)
         * @return APIgetPaymentByTransactionIdRequest
         */
        public APIgetPaymentByTransactionIdRequest checkoutNonce(String checkoutNonce) {
            this.checkoutNonce = checkoutNonce;
            return this;
        }

        /**
         * Set platformName
         * @param platformName For SaaS services, use the marketing name of the platform (for example, shopify). For third party eCommerce platform plugins, use the platform name and your identifier, like company name (for example, woocommerce-yourcompany). Platform and integrator information helps customer service to provide better assistance for the merchants using the integration. (optional)
         * @return APIgetPaymentByTransactionIdRequest
         */
        public APIgetPaymentByTransactionIdRequest platformName(String platformName) {
            this.platformName = platformName;
            return this;
        }

        /**
         * Set signature
         * @param signature HMAC signature calculated over the request headers and payload (optional)
         * @return APIgetPaymentByTransactionIdRequest
         */
        public APIgetPaymentByTransactionIdRequest signature(String signature) {
            this.signature = signature;
            return this;
        }

        /**
         * Build call for getPaymentByTransactionId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPaymentByTransactionIdCall(transactionId, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        }

        /**
         * Execute getPaymentByTransactionId request
         * @return Payment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public Payment execute() throws ApiException {
            ApiResponse<Payment> localVarResp = getPaymentByTransactionIdWithHttpInfo(transactionId, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature);
            return localVarResp.getData();
        }

        /**
         * Execute getPaymentByTransactionId request with HTTP info returned
         * @return ApiResponse&lt;Payment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Payment> executeWithHttpInfo() throws ApiException {
            return getPaymentByTransactionIdWithHttpInfo(transactionId, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature);
        }

        /**
         * Execute getPaymentByTransactionId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Payment> _callback) throws ApiException {
            return getPaymentByTransactionIdAsync(transactionId, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        }
    }

    /**
     * Get a payment by Checkout transaction ID
     * Get a single payment
     * @param transactionId Transaction ID of payment to fetch (required)
     * @return APIgetPaymentByTransactionIdRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPaymentByTransactionIdRequest getPaymentByTransactionId(UUID transactionId) {
        return new APIgetPaymentByTransactionIdRequest(transactionId);
    }
    private okhttp3.Call getPaymentProvidersCall(Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String signature, Integer amount, List<String> groups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchants/payment-providers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (groups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "groups", groups));
        }

        if (checkoutAccount != null) {
            localVarHeaderParams.put("checkout-account", localVarApiClient.parameterToString(checkoutAccount));
        }

        if (checkoutAlgorithm != null) {
            localVarHeaderParams.put("checkout-algorithm", localVarApiClient.parameterToString(checkoutAlgorithm));
        }

        if (checkoutMethod != null) {
            localVarHeaderParams.put("checkout-method", localVarApiClient.parameterToString(checkoutMethod));
        }

        if (checkoutTimestamp != null) {
            localVarHeaderParams.put("checkout-timestamp", localVarApiClient.parameterToString(checkoutTimestamp));
        }

        if (checkoutNonce != null) {
            localVarHeaderParams.put("checkout-nonce", localVarApiClient.parameterToString(checkoutNonce));
        }

        if (signature != null) {
            localVarHeaderParams.put("signature", localVarApiClient.parameterToString(signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentProvidersValidateBeforeCall(Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String signature, Integer amount, List<String> groups, final ApiCallback _callback) throws ApiException {
        return getPaymentProvidersCall(checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, signature, amount, groups, _callback);

    }


    private ApiResponse<List<BasePaymentMethodProvider>> getPaymentProvidersWithHttpInfo(Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String signature, Integer amount, List<String> groups) throws ApiException {
        okhttp3.Call localVarCall = getPaymentProvidersValidateBeforeCall(checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, signature, amount, groups, null);
        Type localVarReturnType = new TypeToken<List<BasePaymentMethodProvider>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPaymentProvidersAsync(Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, OffsetDateTime checkoutTimestamp, String checkoutNonce, String signature, Integer amount, List<String> groups, final ApiCallback<List<BasePaymentMethodProvider>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentProvidersValidateBeforeCall(checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, signature, amount, groups, _callback);
        Type localVarReturnType = new TypeToken<List<BasePaymentMethodProvider>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPaymentProvidersRequest {
        private Integer checkoutAccount;
        private String checkoutAlgorithm;
        private String checkoutMethod;
        private OffsetDateTime checkoutTimestamp;
        private String checkoutNonce;
        private String signature;
        private Integer amount;
        private List<String> groups;

        private APIgetPaymentProvidersRequest() {
        }

        /**
         * Set checkoutAccount
         * @param checkoutAccount Merchant ID (optional)
         * @return APIgetPaymentProvidersRequest
         */
        public APIgetPaymentProvidersRequest checkoutAccount(Integer checkoutAccount) {
            this.checkoutAccount = checkoutAccount;
            return this;
        }

        /**
         * Set checkoutAlgorithm
         * @param checkoutAlgorithm HMAC algorithm (optional)
         * @return APIgetPaymentProvidersRequest
         */
        public APIgetPaymentProvidersRequest checkoutAlgorithm(String checkoutAlgorithm) {
            this.checkoutAlgorithm = checkoutAlgorithm;
            return this;
        }

        /**
         * Set checkoutMethod
         * @param checkoutMethod HTTP method of the request (optional)
         * @return APIgetPaymentProvidersRequest
         */
        public APIgetPaymentProvidersRequest checkoutMethod(String checkoutMethod) {
            this.checkoutMethod = checkoutMethod;
            return this;
        }

        /**
         * Set checkoutTimestamp
         * @param checkoutTimestamp Current timestamp in ISO 8601 format (optional)
         * @return APIgetPaymentProvidersRequest
         */
        public APIgetPaymentProvidersRequest checkoutTimestamp(OffsetDateTime checkoutTimestamp) {
            this.checkoutTimestamp = checkoutTimestamp;
            return this;
        }

        /**
         * Set checkoutNonce
         * @param checkoutNonce Unique random identifier (optional)
         * @return APIgetPaymentProvidersRequest
         */
        public APIgetPaymentProvidersRequest checkoutNonce(String checkoutNonce) {
            this.checkoutNonce = checkoutNonce;
            return this;
        }

        /**
         * Set signature
         * @param signature HMAC signature calculated over the request headers and payload (optional)
         * @return APIgetPaymentProvidersRequest
         */
        public APIgetPaymentProvidersRequest signature(String signature) {
            this.signature = signature;
            return this;
        }

        /**
         * Set amount
         * @param amount Optional amount in minor unit (eg. EUR cents) for the payment providers. Some providers have minimum or maximum amounts that can be purchased.  (optional)
         * @return APIgetPaymentProvidersRequest
         */
        public APIgetPaymentProvidersRequest amount(Integer amount) {
            this.amount = amount;
            return this;
        }

        /**
         * Set groups
         * @param groups Comma separated list of payment method groups to include in the reply. (optional)
         * @return APIgetPaymentProvidersRequest
         */
        public APIgetPaymentProvidersRequest groups(List<String> groups) {
            this.groups = groups;
            return this;
        }

        /**
         * Build call for getPaymentProviders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment methods available </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPaymentProvidersCall(checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, signature, amount, groups, _callback);
        }

        /**
         * Execute getPaymentProviders request
         * @return List&lt;BasePaymentMethodProvider&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment methods available </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public List<BasePaymentMethodProvider> execute() throws ApiException {
            ApiResponse<List<BasePaymentMethodProvider>> localVarResp = getPaymentProvidersWithHttpInfo(checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, signature, amount, groups);
            return localVarResp.getData();
        }

        /**
         * Execute getPaymentProviders request with HTTP info returned
         * @return ApiResponse&lt;List&lt;BasePaymentMethodProvider&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment methods available </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<BasePaymentMethodProvider>> executeWithHttpInfo() throws ApiException {
            return getPaymentProvidersWithHttpInfo(checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, signature, amount, groups);
        }

        /**
         * Execute getPaymentProviders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment methods available </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<BasePaymentMethodProvider>> _callback) throws ApiException {
            return getPaymentProvidersAsync(checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTimestamp, checkoutNonce, signature, amount, groups, _callback);
        }
    }

    /**
     * List merchant payment methods
     * Returns the payment methods available for merchant without creating a new payment to the system. Useful for displaying payment provider icons during different phases of checkout before finally actually creating the payment request when customer decides to pay 
     * @return APIgetPaymentProvidersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment methods available </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPaymentProvidersRequest getPaymentProviders() {
        return new APIgetPaymentProvidersRequest();
    }
    private okhttp3.Call refundPaymentByTransactionIdCall(UUID transactionId, Refund refund, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, UUID checkoutTransactionId, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = refund;

        // create path and map variables
        String localVarPath = "/payments/{transactionId}/refund"
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkoutAccount != null) {
            localVarHeaderParams.put("checkout-account", localVarApiClient.parameterToString(checkoutAccount));
        }

        if (checkoutAlgorithm != null) {
            localVarHeaderParams.put("checkout-algorithm", localVarApiClient.parameterToString(checkoutAlgorithm));
        }

        if (checkoutMethod != null) {
            localVarHeaderParams.put("checkout-method", localVarApiClient.parameterToString(checkoutMethod));
        }

        if (checkoutTransactionId != null) {
            localVarHeaderParams.put("checkout-transaction-id", localVarApiClient.parameterToString(checkoutTransactionId));
        }

        if (checkoutTimestamp != null) {
            localVarHeaderParams.put("checkout-timestamp", localVarApiClient.parameterToString(checkoutTimestamp));
        }

        if (checkoutNonce != null) {
            localVarHeaderParams.put("checkout-nonce", localVarApiClient.parameterToString(checkoutNonce));
        }

        if (platformName != null) {
            localVarHeaderParams.put("platform-name", localVarApiClient.parameterToString(platformName));
        }

        if (signature != null) {
            localVarHeaderParams.put("signature", localVarApiClient.parameterToString(signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refundPaymentByTransactionIdValidateBeforeCall(UUID transactionId, Refund refund, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, UUID checkoutTransactionId, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling refundPaymentByTransactionId(Async)");
        }

        // verify the required parameter 'refund' is set
        if (refund == null) {
            throw new ApiException("Missing the required parameter 'refund' when calling refundPaymentByTransactionId(Async)");
        }

        return refundPaymentByTransactionIdCall(transactionId, refund, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);

    }


    private ApiResponse<RefundResponse> refundPaymentByTransactionIdWithHttpInfo(UUID transactionId, Refund refund, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, UUID checkoutTransactionId, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature) throws ApiException {
        okhttp3.Call localVarCall = refundPaymentByTransactionIdValidateBeforeCall(transactionId, refund, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature, null);
        Type localVarReturnType = new TypeToken<RefundResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call refundPaymentByTransactionIdAsync(UUID transactionId, Refund refund, Integer checkoutAccount, String checkoutAlgorithm, String checkoutMethod, UUID checkoutTransactionId, OffsetDateTime checkoutTimestamp, String checkoutNonce, String platformName, String signature, final ApiCallback<RefundResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = refundPaymentByTransactionIdValidateBeforeCall(transactionId, refund, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        Type localVarReturnType = new TypeToken<RefundResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIrefundPaymentByTransactionIdRequest {
        private final UUID transactionId;
        private final Refund refund;
        private Integer checkoutAccount;
        private String checkoutAlgorithm;
        private String checkoutMethod;
        private UUID checkoutTransactionId;
        private OffsetDateTime checkoutTimestamp;
        private String checkoutNonce;
        private String platformName;
        private String signature;

        private APIrefundPaymentByTransactionIdRequest(UUID transactionId, Refund refund) {
            this.transactionId = transactionId;
            this.refund = refund;
        }

        /**
         * Set checkoutAccount
         * @param checkoutAccount Merchant ID (optional)
         * @return APIrefundPaymentByTransactionIdRequest
         */
        public APIrefundPaymentByTransactionIdRequest checkoutAccount(Integer checkoutAccount) {
            this.checkoutAccount = checkoutAccount;
            return this;
        }

        /**
         * Set checkoutAlgorithm
         * @param checkoutAlgorithm HMAC algorithm (optional)
         * @return APIrefundPaymentByTransactionIdRequest
         */
        public APIrefundPaymentByTransactionIdRequest checkoutAlgorithm(String checkoutAlgorithm) {
            this.checkoutAlgorithm = checkoutAlgorithm;
            return this;
        }

        /**
         * Set checkoutMethod
         * @param checkoutMethod HTTP method of the request (optional)
         * @return APIrefundPaymentByTransactionIdRequest
         */
        public APIrefundPaymentByTransactionIdRequest checkoutMethod(String checkoutMethod) {
            this.checkoutMethod = checkoutMethod;
            return this;
        }

        /**
         * Set checkoutTransactionId
         * @param checkoutTransactionId The same transaction ID as in route (optional)
         * @return APIrefundPaymentByTransactionIdRequest
         */
        public APIrefundPaymentByTransactionIdRequest checkoutTransactionId(UUID checkoutTransactionId) {
            this.checkoutTransactionId = checkoutTransactionId;
            return this;
        }

        /**
         * Set checkoutTimestamp
         * @param checkoutTimestamp Current timestamp in ISO 8601 format (optional)
         * @return APIrefundPaymentByTransactionIdRequest
         */
        public APIrefundPaymentByTransactionIdRequest checkoutTimestamp(OffsetDateTime checkoutTimestamp) {
            this.checkoutTimestamp = checkoutTimestamp;
            return this;
        }

        /**
         * Set checkoutNonce
         * @param checkoutNonce Unique random identifier (optional)
         * @return APIrefundPaymentByTransactionIdRequest
         */
        public APIrefundPaymentByTransactionIdRequest checkoutNonce(String checkoutNonce) {
            this.checkoutNonce = checkoutNonce;
            return this;
        }

        /**
         * Set platformName
         * @param platformName For SaaS services, use the marketing name of the platform (for example, shopify). For third party eCommerce platform plugins, use the platform name and your identifier, like company name (for example, woocommerce-yourcompany). Platform and integrator information helps customer service to provide better assistance for the merchants using the integration. (optional)
         * @return APIrefundPaymentByTransactionIdRequest
         */
        public APIrefundPaymentByTransactionIdRequest platformName(String platformName) {
            this.platformName = platformName;
            return this;
        }

        /**
         * Set signature
         * @param signature HMAC signature calculated over the request headers and payload (optional)
         * @return APIrefundPaymentByTransactionIdRequest
         */
        public APIrefundPaymentByTransactionIdRequest signature(String signature) {
            this.signature = signature;
            return this;
        }

        /**
         * Build call for refundPaymentByTransactionId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Refund created succesfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Payment method provider does not support refunds </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return refundPaymentByTransactionIdCall(transactionId, refund, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        }

        /**
         * Execute refundPaymentByTransactionId request
         * @return RefundResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Refund created succesfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Payment method provider does not support refunds </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public RefundResponse execute() throws ApiException {
            ApiResponse<RefundResponse> localVarResp = refundPaymentByTransactionIdWithHttpInfo(transactionId, refund, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature);
            return localVarResp.getData();
        }

        /**
         * Execute refundPaymentByTransactionId request with HTTP info returned
         * @return ApiResponse&lt;RefundResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Refund created succesfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Payment method provider does not support refunds </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RefundResponse> executeWithHttpInfo() throws ApiException {
            return refundPaymentByTransactionIdWithHttpInfo(transactionId, refund, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature);
        }

        /**
         * Execute refundPaymentByTransactionId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Refund created succesfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Payment method provider does not support refunds </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RefundResponse> _callback) throws ApiException {
            return refundPaymentByTransactionIdAsync(transactionId, refund, checkoutAccount, checkoutAlgorithm, checkoutMethod, checkoutTransactionId, checkoutTimestamp, checkoutNonce, platformName, signature, _callback);
        }
    }

    /**
     * Refund a payment
     * Refund a payment by transaction ID. Refund operation is asynchronous. Refund request is validated, and if the refund can be done a 201 is returned. 
     * @param transactionId Transaction ID of payment to refund (required)
     * @param refund Refund payload (required)
     * @return APIrefundPaymentByTransactionIdRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Refund created succesfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request did not pass input validation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Payment method provider does not support refunds </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public APIrefundPaymentByTransactionIdRequest refundPaymentByTransactionId(UUID transactionId, Refund refund) {
        return new APIrefundPaymentByTransactionIdRequest(transactionId, refund);
    }
}
